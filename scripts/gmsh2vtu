#!/usr/bin/env python

from optparse import OptionParser
import re
import sys
import os.path
import vtk

optparser=OptionParser(usage='usage: %prog [options] <filename>',
                       add_help_option=True,
                       description="""This takes a Gmsh 2.0 .msh ascii file """ + 
                       """and produces VTK unstructured grid file (.vtu).""")

optparser.add_option("--2D", "--2d", "-2",
                  help="discard 3rd coordinate of node positions",
		     action="store_const", const=2, dest="dim", default=3)

(options, argv) = optparser.parse_args()

if len(argv)<1:
    optparser.print_help()
    sys.exit(1)

if argv[0][-4:]!=".msh":
    sys.stderr.write("Mesh filename must end in .msh\n")
    optparser.print_help()
    sys.exit(1)

basename=os.path.basename(argv[0][:-4])

ug = vtk.vtkUnstructuredGrid()

mshfile=file(argv[0], 'r')

# Header section
assert(mshfile.readline().strip()=="$MeshFormat")
assert(mshfile.readline().strip()in["2 0 8", "2.1 0 8"])
assert(mshfile.readline().strip()=="$EndMeshFormat")

# Nodes section
pts = vtk.vtkPoints()
assert(mshfile.readline().strip()=="$Nodes")
nodecount=int(mshfile.readline())

dim=options.dim
assert(dim==3)
gmsh_node_map = {}
for i in range(nodecount):
    # Node syntax
    line = mshfile.readline().split()
    gmsh_node = line[0] # the node number that gmsh has assigned, which might
                        # not be consecutive
    gmsh_node_map[gmsh_node] = str(i+1)
    pts.InsertNextPoint(float(line[1]), float(line[2]), float(line[3]))
ug.SetPoints(pts)

assert(mshfile.readline().strip()=="$EndNodes")

# Elements section
assert(mshfile.readline().strip()=="$Elements")
elementcount=int(mshfile.readline())

# Now loop over the elements placing them in the appropriate buckets.
edges=[]
triangles=[]
tets=[]
quads=[]
hexes=[]

for i in range(elementcount):
    
    element=mshfile.readline().split()

    if (element[1]=="1"): # 2 node line.
        ids = vtk.vtkIdList()
        for j in element[-2:]:
            ids.InsertNextId(int(j)-1) 
        ug.InsertNextCell(vtk.VTK_LINE, ids)
    elif (element[1]=="2"): # 3 node triangle.
        ids = vtk.vtkIdList()
        for j in element[-3:]:
            ids.InsertNextId(int(j)-1)
        ug.InsertNextCell(vtk.VTK_TRIANGLE, ids)
    elif (element[1]=="3"): # 4-node quadrangle. 
        ids = vtk.vtkIdList()
        for j in element[-4:]:
            ids.InsertNextId(int(j)-1)
        ug.InsertNextCell(vtk.VTK_QUAD, ids)
    elif (element[1]=="4"): # 4-node tetrahedron. 
        ids = vtk.vtkIdList()
        for j in element[-4:]:
            ids.InsertNextId(int(j)-1) 
        ug.InsertNextCell(vtk.VTK_TETRA, ids)
    elif (element[1]=="5"): # 8-node hexahedron.
        ids = vtk.vtkIdList()
        for j in element[-8:]:
            ids.InsertNextId(int(j)-1) 
        ug.InsertNextCell(vtk.VTK_HEXAHEDRON, ids)
    elif (element[1]=="6"): # 6-node prism.
        ids = vtk.vtkIdList()
        for j in element[-6:]:
            ids.InsertNextId(int(j)-1) 
        ug.InsertNextCell(vtk.VTK_PYRAMID, ids)
    elif (element[1]=="5"): # 5-node pyramid.
        ids = vtk.vtkIdList()
        for j in element[-8:]:
            ids.InsertNextId(int(j)-1) 
        ug.InsertNextCell(vtk.VTK_WEDGE, ids)
    elif(element[1]=="15"):
        # Ignore point elements
        pass
    else:
        sys.stderr.write("Unknown element type "+`element[1]`+'\n')
        sys.exit(1)

writer = vtk.vtkXMLUnstructuredGridWriter()

compressor = vtk.vtkZLibDataCompressor()
writer.SetCompressor(compressor)

vtkfilename = basename+".vtu"
writer.SetFileName(vtkfilename)
writer.SetInput(ug)
writer.Write()
