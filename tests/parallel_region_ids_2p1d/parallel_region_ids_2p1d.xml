<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>parallel_region_ids</name>
  <owner userid="cwilson"/>
  <tags>flml zoltan parallel</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>make clean-run; mpiexec -n 3 ../../bin/fluidity -v2 -l parallel_region_ids.flml</command_line>
  </problem_definition>
  <variables>
    <variable name="stat" language="python">import fluidity_tools

stat = fluidity_tools.stat_parser("parallel_region_ids.stat")</variable>
    <variable name="interpolatedVtu" language="python">import vtktools
import fluidity.diagnostics.vtutools as vtutools

interpolatedVtu = vtutools.PvtuToVtu(vtktools.vtu("parallel_region_ids_1.pvtu"))</variable>
    <variable name="initialVtu" language="python">import vtktools
import fluidity.diagnostics.vtutools as vtutools

initialVtu = vtutools.PvtuToVtu(vtktools.vtu("parallel_region_ids_0.pvtu"))</variable>
    <variable name="regionids_integral" language="python">
from fluidity_tools import stat_parser
s = stat_parser("parallel_region_ids.stat")
regionids_integral = s["Fluid"]["RegionIDs"]["integral"]
    </variable>
    <variable name="regionid_upperleft" language="python">
import vtktools
import glob
import fluidity.diagnostics.vtutools as vtutools
from numpy import array, concatenate, ones

regionid_upperleft = []
centre = array([0.25, 0.75])

posx = []
posx.append([centre[0]])
posx.append([centre[0]-1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]-1./8.])
posx = array(posx)

posy = []
posy.append([centre[1]])
posy.append([centre[1]-1./8.])
posy.append([centre[1]-1./8.])
posy.append([centre[1]+1./8.])
posy.append([centre[1]+1./8.])
posy = array(posy)

posz = -0.5*ones((len(posx),1))

pos = concatenate((posx, posy, posz), 1)

files = glob.glob("parallel_region_ids_*.pvtu")
for f in files:
  pvtu = vtktools.vtu(f)
  vtu = vtutools.VtuFromPvtu(pvtu)
  regionid_upperleft.append(vtu.ProbeData(pos, "RegionIDs"))

regionid_upperleft = array(regionid_upperleft)
    </variable>
    <variable name="regionid_upperright" language="python">
import vtktools
import glob
import fluidity.diagnostics.vtutools as vtutools
from numpy import array, concatenate, ones

regionid_upperright = []
centre = array([0.75, 0.75])

posx = []
posx.append([centre[0]])
posx.append([centre[0]-1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]-1./8.])
posx = array(posx)

posy = []
posy.append([centre[1]])
posy.append([centre[1]-1./8.])
posy.append([centre[1]-1./8.])
posy.append([centre[1]+1./8.])
posy.append([centre[1]+1./8.])
posy = array(posy)

posz = -0.5*ones((len(posx),1))

pos = concatenate((posx, posy, posz), 1)

files = glob.glob("parallel_region_ids_*.pvtu")
for f in files:
  pvtu = vtktools.vtu(f)
  vtu = vtutools.VtuFromPvtu(pvtu)
  regionid_upperright.append(vtu.ProbeData(pos, "RegionIDs"))

regionid_upperright = array(regionid_upperright)
    </variable>
    <variable name="regionid_lowerleft" language="python">
import vtktools
import glob
import fluidity.diagnostics.vtutools as vtutools
from numpy import array, concatenate, ones

regionid_lowerleft = []
centre = array([0.25, 0.25])

posx = []
posx.append([centre[0]])
posx.append([centre[0]-1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]-1./8.])
posx = array(posx)

posy = []
posy.append([centre[1]])
posy.append([centre[1]-1./8.])
posy.append([centre[1]-1./8.])
posy.append([centre[1]+1./8.])
posy.append([centre[1]+1./8.])
posy = array(posy)

posz = -0.5*ones((len(posx),1))

pos = concatenate((posx, posy, posz), 1)

files = glob.glob("parallel_region_ids_*.pvtu")
for f in files:
  pvtu = vtktools.vtu(f)
  vtu = vtutools.VtuFromPvtu(pvtu)
  regionid_lowerleft.append(vtu.ProbeData(pos, "RegionIDs"))

regionid_lowerleft = array(regionid_lowerleft)
    </variable>
    <variable name="regionid_lowerright" language="python">
import vtktools
import glob
import fluidity.diagnostics.vtutools as vtutools
from numpy import array, concatenate, ones

regionid_lowerright = []
centre = array([0.75, 0.25])

posx = []
posx.append([centre[0]])
posx.append([centre[0]-1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]+1./8.])
posx.append([centre[0]-1./8.])
posx = array(posx)

posy = []
posy.append([centre[1]])
posy.append([centre[1]-1./8.])
posy.append([centre[1]-1./8.])
posy.append([centre[1]+1./8.])
posy.append([centre[1]+1./8.])
posy = array(posy)

posz = -0.5*ones((len(posx),1))

pos = concatenate((posx, posy, posz), 1)

files = glob.glob("parallel_region_ids_*.pvtu")
for f in files:
  pvtu = vtktools.vtu(f)
  vtu = vtutools.VtuFromPvtu(pvtu)
  regionid_lowerright.append(vtu.ProbeData(pos, "RegionIDs"))

regionid_lowerright = array(regionid_lowerright)
    </variable>
  </variables>
  <pass_tests>
    <test name="SimulationCompleted" language="python">print "Timesteps: ", len(stat["ElapsedTime"])

assert(len(stat["ElapsedTime"]) == 1)</test>
    <test name="DummyAdaptivity" language="python">import vtktools

assert(vtktools.VtuMatchLocationsArbitrary(initialVtu, interpolatedVtu))</test>
    <test name="regionids integral is initially 26.5" language="python">
assert abs(regionids_integral[0] - 26.5) &lt; 1e-9
    </test>
    <test name="regionids integral is constant" language="python">
import numpy
assert(numpy.all(abs(regionids_integral[1:] - regionids_integral[0]) &lt; 1e-9))
    </test>
    <test name="regionids upper left is 28" language="python">
import numpy
assert(numpy.all(abs(regionid_upperleft - 28.) &lt; 1e-9))
    </test>
    <test name="regionids upper right is 27" language="python">
import numpy
assert(numpy.all(abs(regionid_upperright - 27.) &lt; 1e-9))
    </test>
    <test name="regionids lower left is 25" language="python">
import numpy
assert(numpy.all(abs(regionid_lowerleft - 25.) &lt; 1e-9))
    </test>
    <test name="regionids lower right is 26" language="python">
import numpy
assert(numpy.all(abs(regionid_lowerright - 26.) &lt; 1e-9))
    </test>
  </pass_tests>
</testproblem>
