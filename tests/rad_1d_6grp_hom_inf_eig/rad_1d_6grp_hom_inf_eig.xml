<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>rad_1d_6grp_hom_inf_eig</name>
  <owner userid="btollit"/>
  <tags>flml radiation</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/fluidity rad_1d_6grp_hom_inf_eig_HighToLow.flml 

cp rad_1d_6grp_hom_inf_eig_HighToLow.flml rad_1d_6grp_hom_inf_eig_LowToHigh.flml
sed -i 's/HighToLow/LowToHigh/' rad_1d_6grp_hom_inf_eig_LowToHigh.flml

../../bin/fluidity rad_1d_6grp_hom_inf_eig_LowToHigh.flml 

rm -f rad_1d_6grp_hom_inf_eig_LowToHigh.flml

cp rad_1d_6grp_hom_inf_eig_HighToLow.flml rad_1d_6grp_hom_inf_eig_HighToLowToHigh.flml
sed -i 's/HighToLow/HighToLowToHigh/' rad_1d_6grp_hom_inf_eig_HighToLowToHigh.flml

../../bin/fluidity rad_1d_6grp_hom_inf_eig_HighToLowToHigh.flml 

rm -f rad_1d_6grp_hom_inf_eig_HighToLowToHigh.flml

cp rad_1d_6grp_hom_inf_eig_HighToLow.flml rad_1d_6grp_hom_inf_eig_LowToHighToLow.flml
sed -i 's/HighToLow/LowToHighToLow/' rad_1d_6grp_hom_inf_eig_LowToHighToLow.flml

../../bin/fluidity rad_1d_6grp_hom_inf_eig_LowToHighToLow.flml 

rm -f rad_1d_6grp_hom_inf_eig_LowToHighToLow.flml

    </command_line>
    <!-- Radiation diffusion eigenvalue problem with 1 material, 6 energy groups with upscatter with all reflective BC using a 1d geometry compared to analytic solution for the keff and flux ratio, this is ABC problem 75. This tests each possibility of the energy solve directions for the scatter iteration-->
  </problem_definition>
  <variables>
    <variable name="ParticleKeffNeutron_HighToLow" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_HighToLow = stat("rad_1d_6grp_hom_inf_eig_HighToLow.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="FluxGroup1Moment1Neutron_HighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLow_1.vtu")
FluxGroup1Moment1Neutron_HighToLow = max(v.GetScalarRange("ParticleFluxGroup1Moment1Neutron"))
    </variable>
    <variable name="FluxGroup2Moment1Neutron_HighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLow_1.vtu")
FluxGroup2Moment1Neutron_HighToLow = max(v.GetScalarRange("ParticleFluxGroup2Moment1Neutron"))
    </variable>
    <variable name="FluxGroup3Moment1Neutron_HighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLow_1.vtu")
FluxGroup3Moment1Neutron_HighToLow = max(v.GetScalarRange("ParticleFluxGroup3Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup4Moment1Neutron_HighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLow_1.vtu")
FluxGroup4Moment1Neutron_HighToLow = max(v.GetScalarRange("ParticleFluxGroup4Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup5Moment1Neutron_HighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLow_1.vtu")
FluxGroup5Moment1Neutron_HighToLow = max(v.GetScalarRange("ParticleFluxGroup5Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup6Moment1Neutron_HighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLow_1.vtu")
FluxGroup6Moment1Neutron_HighToLow = max(v.GetScalarRange("ParticleFluxGroup6Moment1Neutron"))
    </variable>    

    <variable name="ParticleKeffNeutron_LowToHigh" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_LowToHigh = stat("rad_1d_6grp_hom_inf_eig_LowToHigh.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="FluxGroup1Moment1Neutron_LowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHigh_1.vtu")
FluxGroup1Moment1Neutron_LowToHigh = max(v.GetScalarRange("ParticleFluxGroup1Moment1Neutron"))
    </variable>
    <variable name="FluxGroup2Moment1Neutron_LowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHigh_1.vtu")
FluxGroup2Moment1Neutron_LowToHigh = max(v.GetScalarRange("ParticleFluxGroup2Moment1Neutron"))
    </variable>
    <variable name="FluxGroup3Moment1Neutron_LowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHigh_1.vtu")
FluxGroup3Moment1Neutron_LowToHigh = max(v.GetScalarRange("ParticleFluxGroup3Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup4Moment1Neutron_LowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHigh_1.vtu")
FluxGroup4Moment1Neutron_LowToHigh = max(v.GetScalarRange("ParticleFluxGroup4Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup5Moment1Neutron_LowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHigh_1.vtu")
FluxGroup5Moment1Neutron_LowToHigh = max(v.GetScalarRange("ParticleFluxGroup5Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup6Moment1Neutron_LowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHigh_1.vtu")
FluxGroup6Moment1Neutron_LowToHigh = max(v.GetScalarRange("ParticleFluxGroup6Moment1Neutron"))
    </variable>    

    <variable name="ParticleKeffNeutron_HighToLowToHigh" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_HighToLowToHigh = stat("rad_1d_6grp_hom_inf_eig_HighToLowToHigh.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="FluxGroup1Moment1Neutron_HighToLowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLowToHigh_1.vtu")
FluxGroup1Moment1Neutron_HighToLowToHigh = max(v.GetScalarRange("ParticleFluxGroup1Moment1Neutron"))
    </variable>
    <variable name="FluxGroup2Moment1Neutron_HighToLowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLowToHigh_1.vtu")
FluxGroup2Moment1Neutron_HighToLowToHigh = max(v.GetScalarRange("ParticleFluxGroup2Moment1Neutron"))
    </variable>
    <variable name="FluxGroup3Moment1Neutron_HighToLowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLowToHigh_1.vtu")
FluxGroup3Moment1Neutron_HighToLowToHigh = max(v.GetScalarRange("ParticleFluxGroup3Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup4Moment1Neutron_HighToLowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLowToHigh_1.vtu")
FluxGroup4Moment1Neutron_HighToLowToHigh = max(v.GetScalarRange("ParticleFluxGroup4Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup5Moment1Neutron_HighToLowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLowToHigh_1.vtu")
FluxGroup5Moment1Neutron_HighToLowToHigh = max(v.GetScalarRange("ParticleFluxGroup5Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup6Moment1Neutron_HighToLowToHigh" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_HighToLowToHigh_1.vtu")
FluxGroup6Moment1Neutron_HighToLowToHigh = max(v.GetScalarRange("ParticleFluxGroup6Moment1Neutron"))
    </variable>    

    <variable name="ParticleKeffNeutron_LowToHighToLow" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_LowToHighToLow = stat("rad_1d_6grp_hom_inf_eig_LowToHighToLow.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="FluxGroup1Moment1Neutron_LowToHighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHighToLow_1.vtu")
FluxGroup1Moment1Neutron_LowToHighToLow = max(v.GetScalarRange("ParticleFluxGroup1Moment1Neutron"))
    </variable>
    <variable name="FluxGroup2Moment1Neutron_LowToHighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHighToLow_1.vtu")
FluxGroup2Moment1Neutron_LowToHighToLow = max(v.GetScalarRange("ParticleFluxGroup2Moment1Neutron"))
    </variable>
    <variable name="FluxGroup3Moment1Neutron_LowToHighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHighToLow_1.vtu")
FluxGroup3Moment1Neutron_LowToHighToLow = max(v.GetScalarRange("ParticleFluxGroup3Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup4Moment1Neutron_LowToHighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHighToLow_1.vtu")
FluxGroup4Moment1Neutron_LowToHighToLow = max(v.GetScalarRange("ParticleFluxGroup4Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup5Moment1Neutron_LowToHighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHighToLow_1.vtu")
FluxGroup5Moment1Neutron_LowToHighToLow = max(v.GetScalarRange("ParticleFluxGroup5Moment1Neutron"))
    </variable>    
    <variable name="FluxGroup6Moment1Neutron_LowToHighToLow" language="python">
import vtktools
v = vtktools.vtu("rad_1d_6grp_hom_inf_eig_LowToHighToLow_1.vtu")
FluxGroup6Moment1Neutron_LowToHighToLow = max(v.GetScalarRange("ParticleFluxGroup6Moment1Neutron"))
    </variable>
  </variables>
  <pass_tests>
    <test name="Check ParticleKeffNeutron_HighToLow against analytic with tolerance 1.0e-06" language="python">
analytic_keff = 1.6
print 'Relative error compared to analytic: ',abs((ParticleKeffNeutron_HighToLow - analytic_keff)/analytic_keff)
assert abs((ParticleKeffNeutron_HighToLow - analytic_keff)/analytic_keff) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLow ratio of group 5 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup5Moment1Neutron_HighToLow / FluxGroup6Moment1Neutron_HighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLow ratio of group 2 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup2Moment1Neutron_HighToLow / FluxGroup1Moment1Neutron_HighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLow ratio of group 4 moment 1 to group 5 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup4Moment1Neutron_HighToLow / FluxGroup5Moment1Neutron_HighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLow ratio of group 3 moment 1 to group 2 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup3Moment1Neutron_HighToLow / FluxGroup2Moment1Neutron_HighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLow ratio of group 4 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup4Moment1Neutron_HighToLow / FluxGroup6Moment1Neutron_HighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLow ratio of group 3 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup3Moment1Neutron_HighToLow / FluxGroup1Moment1Neutron_HighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>

    <test name="Check ParticleKeffNeutron_LowToHigh against analytic with tolerance 1.0e-06" language="python">
analytic_keff = 1.6
print 'Relative error compared to analytic: ',abs((ParticleKeffNeutron_LowToHigh - analytic_keff)/analytic_keff)
assert abs((ParticleKeffNeutron_LowToHigh - analytic_keff)/analytic_keff) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHigh ratio of group 5 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup5Moment1Neutron_LowToHigh / FluxGroup6Moment1Neutron_LowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHigh ratio of group 2 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup2Moment1Neutron_LowToHigh / FluxGroup1Moment1Neutron_LowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHigh ratio of group 4 moment 1 to group 5 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup4Moment1Neutron_LowToHigh / FluxGroup5Moment1Neutron_LowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHigh ratio of group 3 moment 1 to group 2 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup3Moment1Neutron_LowToHigh / FluxGroup2Moment1Neutron_LowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHigh ratio of group 4 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup4Moment1Neutron_LowToHigh / FluxGroup6Moment1Neutron_LowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHigh ratio of group 3 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup3Moment1Neutron_LowToHigh / FluxGroup1Moment1Neutron_LowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>

    <test name="Check ParticleKeffNeutron_HighToLowToHigh against analytic with tolerance 1.0e-06" language="python">
analytic_keff = 1.6
print 'Relative error compared to analytic: ',abs((ParticleKeffNeutron_HighToLowToHigh - analytic_keff)/analytic_keff)
assert abs((ParticleKeffNeutron_HighToLowToHigh - analytic_keff)/analytic_keff) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLowToHigh ratio of group 5 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup5Moment1Neutron_HighToLowToHigh / FluxGroup6Moment1Neutron_HighToLowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLowToHigh ratio of group 2 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup2Moment1Neutron_HighToLowToHigh / FluxGroup1Moment1Neutron_HighToLowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLowToHigh ratio of group 4 moment 1 to group 5 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup4Moment1Neutron_HighToLowToHigh / FluxGroup5Moment1Neutron_HighToLowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLowToHigh ratio of group 3 moment 1 to group 2 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup3Moment1Neutron_HighToLowToHigh / FluxGroup2Moment1Neutron_HighToLowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLowToHigh ratio of group 4 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup4Moment1Neutron_HighToLowToHigh / FluxGroup6Moment1Neutron_HighToLowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_HighToLowToHigh ratio of group 3 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup3Moment1Neutron_HighToLowToHigh / FluxGroup1Moment1Neutron_HighToLowToHigh 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>

    <test name="Check ParticleKeffNeutron_LowToHighToLow against analytic with tolerance 1.0e-06" language="python">
analytic_keff = 1.6
print 'Relative error compared to analytic: ',abs((ParticleKeffNeutron_LowToHighToLow - analytic_keff)/analytic_keff)
assert abs((ParticleKeffNeutron_LowToHighToLow - analytic_keff)/analytic_keff) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHighToLow ratio of group 5 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup5Moment1Neutron_LowToHighToLow / FluxGroup6Moment1Neutron_LowToHighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHighToLow ratio of group 2 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.48
flux_ratio = FluxGroup2Moment1Neutron_LowToHighToLow / FluxGroup1Moment1Neutron_LowToHighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHighToLow ratio of group 4 moment 1 to group 5 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup4Moment1Neutron_LowToHighToLow / FluxGroup5Moment1Neutron_LowToHighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHighToLow ratio of group 3 moment 1 to group 2 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup3Moment1Neutron_LowToHighToLow / FluxGroup2Moment1Neutron_LowToHighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHighToLow ratio of group 4 moment 1 to group 6 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup4Moment1Neutron_LowToHighToLow / FluxGroup6Moment1Neutron_LowToHighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux_LowToHighToLow ratio of group 3 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup3Moment1Neutron_LowToHighToLow / FluxGroup1Moment1Neutron_LowToHighToLow 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
