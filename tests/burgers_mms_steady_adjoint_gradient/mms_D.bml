<?xml version="1.0" encoding="utf-8" ?>
<burgers_equation>
    <simulation_name>
        <string_value lines="1">mms_adjoint_D</string_value>
    </simulation_name>
    <geometry>
        <dimension>
            <integer_value rank="0">1</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="mms_D">
                <format name="triangle"></format>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>vtk</dump_format>
        <dump_period_in_timesteps>
            <constant>
                <integer_value rank="0">1</integer_value>
            </constant>
        </dump_period_in_timesteps>
        <output_mesh name="VelocityMesh"></output_mesh>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">1</real_value>
        </timestep>
        <finish_time>
            <real_value rank="0">1</real_value>
        </finish_time>
        <nonlinear_iterations>
            <integer_value rank="0">1</integer_value>
        </nonlinear_iterations>
    </timestepping>
    <material_phase name="Fluid">
        <scalar_field name="Velocity" rank="0">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">0.5</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="preonly"></iterative_method>
                    <preconditioner name="lu"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-16</real_value>
                    </relative_error>
                    <absolute_error>
                        <real_value rank="0">1e-12</real_value>
                    </absolute_error>
                    <max_iterations>
                        <integer_value rank="0">10000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;  from math import sin, cos&#x0A;  x = X[0]&#x0A;  return sin(x) + cos(x)</string_value>
                    </python>
                </initial_condition>
                <boundary_conditions name="bc">
                    <surface_ids>
                        <integer_value rank="1" shape="2">1 2</integer_value>
                    </surface_ids>
                    <type name="dirichlet">
                        <python>
                            <string_value lines="20" type="python">def val(X, t):&#x0A;  from math import sin, cos&#x0A;  x = X[0]&#x0A;  return sin(x) + cos(x)</string_value>
                        </python>
                    </type>
                </boundary_conditions>
                <viscosity>
                    <real_value rank="0">1</real_value>
                </viscosity>
                <stat></stat>
                <adjoint_storage>
                    <exists_in_both></exists_in_both>
                </adjoint_storage>
                <scalar_field name="Source" rank="0">
                    <prescribed>
                        <value name="WholeMesh">
                            <python>
                                <string_value lines="20" type="python">def val(X, t):&#x0A;  from math import sin, cos&#x0A;  x = X[0]&#x0A;  return -(sin(x) - cos(x))*(sin(x) + cos(x)) + sin(x) + cos(x)</string_value>
                            </python>
                        </value>
                    </prescribed>
                </scalar_field>
            </prognostic>
        </scalar_field>
        <scalar_field name="AnalyticalSolution" rank="0">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;  from math import sin, cos&#x0A;  x = X[0]&#x0A;  return sin(x) + cos(x)</string_value>
                    </python>
                </value>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </prescribed>
        </scalar_field>
        <scalar_field name="Error" rank="0">
            <diagnostic>
                <mesh name="VelocityMesh"></mesh>
                <algorithm name="scalar_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="python">soln = state.scalar_fields[&quot;Velocity&quot;]&#x0A;exact = state.scalar_fields[&quot;AnalyticalSolution&quot;]&#x0A;&#x0A;for i in range(field.node_count):&#x0A;  field.set(i, abs(soln.node_val(i) - exact.node_val(i)))</string_value>
                </algorithm>
                <stat></stat>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </diagnostic>
        </scalar_field>
        <scalar_field name="MassVelocity" rank="0">
            <diagnostic>
                <mesh name="VelocityMesh"></mesh>
                <algorithm name="scalar_python_diagnostic" material_phase_support="single">
                    <string_value lines="20" type="python">coord = state.vector_fields[&apos;Coordinate&apos;]&#x0A;u = state.scalar_fields[&apos;Velocity&apos;]&#x0A;field.val[:] = 0.0&#x0A;&#x0A;import numpy&#x0A;import cPickle as pickle&#x0A;&#x0A;if time == 0.0:&#x0A;  for ele in range(coord.ele_count):&#x0A;    t = Transform(ele, coord)&#x0A;    mass = t.shape_shape(u.ele_shape(ele), u.ele_shape(ele))&#x0A;    field.val[u.ele_nodes(ele)] += numpy.dot(mass, u.ele_val(ele))&#x0A;  pickle.dump(field.val, open(&quot;mass_control_mms_adjoint_D_initial_condition_0.pkl&quot;, &quot;w&quot;))</string_value>
                </algorithm>
                <stat></stat>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </diagnostic>
        </scalar_field>
    </material_phase>
    <adjoint>
        <functional name="time_integral_ad">
            <functional_value>
                <algorithm name="functional_value">
                    <string_value lines="20" type="python">import numpy&#x0A;&#x0A;J = 0.0&#x0A;&#x0A;if (time + dt) == 1.0:&#x0A;  coord = states[n][&quot;Fluid&quot;].vector_fields[&quot;Coordinate&quot;]&#x0A;  u = states[n][&quot;Fluid&quot;].scalar_fields[&quot;Velocity&quot;]&#x0A;&#x0A;  for ele in range(coord.element_count):&#x0A;    t = Transform(ele, coord)&#x0A;    shape = u.ele_shape(ele)&#x0A;    mass = t.shape_shape(shape, shape)&#x0A;    J = J + 0.5 * numpy.dot(u.ele_val(ele), numpy.dot(mass, u.ele_val(ele)))&#x0A;    &#x0A;#if hasattr(J, &quot;nominal_value&quot;):&#x0A;#  print &quot;u.val: &quot;, u.val&#x0A;#  print &quot;delJ/delu: &quot;, [J.derivatives[x] for x in u.val]&#x0A;#  print &quot;J.nominal_value: &quot;, J.nominal_valuez</string_value>
                </algorithm>
                <reduction>
                    <sum></sum>
                </reduction>
            </functional_value>
            <functional_dependencies>
                <algorithm name="functional_dependencies">
                    <string_value lines="20" type="python">def dependencies(times, timestep):&#x0A;  if times[0] &lt; 1.0 &lt;= times[1]:&#x0A;    return {&quot;Fluid::Coordinate&quot;: [timestep],&#x0A;            &quot;Fluid::Velocity&quot;: [timestep]}&#x0A;  else:&#x0A;    return {}</string_value>
                </algorithm>
            </functional_dependencies>
        </functional>
        <controls>
            <control name="initial_condition">
                <type name="initial_condition" field_name="Fluid::Velocity"></type>
            </control>
            <load_controls></load_controls>
        </controls>
        <debug>
            <replay_forward_run></replay_forward_run>
            <html_output></html_output>
        </debug>
    </adjoint>
</burgers_equation>
