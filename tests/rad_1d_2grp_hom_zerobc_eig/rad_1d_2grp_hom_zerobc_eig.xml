<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>rad_1d_2grp_hom_zerobc_eig</name>
  <owner userid="btollit"/>
  <tags>flml radiation</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/fluidity rad_1d_2grp_hom_zerobc_eig_A.flml 

cp rad_1d_2grp_hom_zerobc_eig_A.flml rad_1d_2grp_hom_zerobc_eig_B.flml
sed -i 's/_A/_B/' rad_1d_2grp_hom_zerobc_eig_B.flml

../../bin/fluidity rad_1d_2grp_hom_zerobc_eig_B.flml 

rm -f rad_1d_2grp_hom_zerobc_eig_B.flml

cp rad_1d_2grp_hom_zerobc_eig_A.flml rad_1d_2grp_hom_zerobc_eig_C.flml
sed -i 's/_A/_C/' rad_1d_2grp_hom_zerobc_eig_C.flml

../../bin/fluidity rad_1d_2grp_hom_zerobc_eig_C.flml 

rm -f rad_1d_2grp_hom_zerobc_eig_C.flml

cp rad_1d_2grp_hom_zerobc_eig_A.flml rad_1d_2grp_hom_zerobc_eig_D.flml
sed -i 's/_A/_D/' rad_1d_2grp_hom_zerobc_eig_D.flml

../../bin/fluidity rad_1d_2grp_hom_zerobc_eig_D.flml 

rm -f rad_1d_2grp_hom_zerobc_eig_D.flml       
    </command_line>
    <!-- Radiation diffusion eigenvalue problem with one material, two energy groups no upscatter with all zero BC using a 1d geometry compared to PANTHER reference solution for the keff and also the fine mesh linear cg solution for different mesh resolutions -->
  </problem_definition>
  <variables>
    <variable name="ParticleKeffneutron_A" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffneutron_A = stat("rad_1d_2grp_hom_zerobc_eig_A.stat")["ParticleKeffneutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffneutron_B" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffneutron_B = stat("rad_1d_2grp_hom_zerobc_eig_B.stat")["ParticleKeffneutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffneutron_C" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffneutron_C = stat("rad_1d_2grp_hom_zerobc_eig_C.stat")["ParticleKeffneutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffneutron_D" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffneutron_D = stat("rad_1d_2grp_hom_zerobc_eig_D.stat")["ParticleKeffneutron"]["Value"][0]
    </variable>
  </variables>
  <pass_tests>
    <test name="Check ParticleKeffneutron_A against PANTHER reference" language="python">
reference_keff = 1.0
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_A - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_A - reference_keff)/reference_keff) &lt; 4.2e-03
    </test>
    <test name="Check ParticleKeffneutron_B against PANTHER reference" language="python">
reference_keff = 1.0
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_B - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_B - reference_keff)/reference_keff) &lt; 3.9e-03
    </test>
    <test name="Check ParticleKeffneutron_C against PANTHER reference" language="python">
reference_keff = 1.0
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_C - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_C - reference_keff)/reference_keff) &lt; 3.1e-05
    </test>
    <test name="Check ParticleKeffneutron_D against PANTHER reference" language="python">
reference_keff = 1.0
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_D - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_D - reference_keff)/reference_keff) &lt; 1.8e-05
    </test>

    <test name="Check ParticleKeffneutron_A against fine mesh (mesh size 0.001, number of vele 44500) cg reference" language="python">
reference_keff = 0.999986731726
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_A - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_A - reference_keff)/reference_keff) &lt; 4.1e-03
    </test>
    <test name="Check ParticleKeffneutron_B against fine mesh (mesh size 0.001, number of vele 44500) cg reference" language="python">
reference_keff = 0.999986731726
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_B - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_B - reference_keff)/reference_keff) &lt; 3.9e-03
    </test>
    <test name="Check ParticleKeffneutron_C against fine mesh (mesh size 0.001, number of vele 44500) cg reference" language="python">
reference_keff = 0.999986731726
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_C - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_C - reference_keff)/reference_keff) &lt; 1.8e-05
    </test>
    <test name="Check ParticleKeffneutron_D against fine mesh (mesh size 0.001, number of vele 44500) cg reference" language="python">
reference_keff = 0.999986731726
print 'Relative error compared to reference: ',abs((ParticleKeffneutron_D - reference_keff)/reference_keff)
assert abs((ParticleKeffneutron_D - reference_keff)/reference_keff) &lt; 4.4e-06
    </test>

    <test name="Check ParticleKeffneutron_C to ParticleKeffneutron_D convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.999986731726

keff_one = ParticleKeffneutron_C
keff_two = ParticleKeffneutron_D

mesh_one = 89
mesh_two = 178

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 9.0e-04
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
