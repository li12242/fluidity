<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">cdisk_ad</string_value>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="cdisk">
        <format name="triangle">
          <string_value>triangle</string_value>
        </format>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">0.0125663706</real_value>
      <comment>2 * pi/500 (500 steps per revolution)</comment>
    </timestep>
    <finish_time>
      <real_value rank="0">1000</real_value>
    </finish_time>
    <final_timestep>
      <integer_value rank="0">50</integer_value>
      <comment>Go around once.</comment>
    </final_timestep>
  </timestepping>
  <material_phase name="Fluid">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
    from numpy import matrix
    from math import sqrt, sin, pi, cos
    dx= matrix(X)
    r=sqrt(dx*dx.T)
    
    if (r&lt;1.0):
	return(cos(r*pi/2)*X[1],-cos(r*pi/2)*X[0]) 
    else:
	return (0.,0.)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field name="Tracer" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
    from numpy import matrix
    from math import sqrt
    dx= (matrix(X)-matrix((-0.5,0)))
    r=sqrt(dx*dx.T)
    if (r&lt;0.25):
	return 1.0
    else:
	return 0</string_value>
          </python>
        </initial_condition>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.001</real_value>
                </constant>
              </isotropic>
            </value>
          </prescribed>
        </tensor_field>
        <output/>
        <stat/>
      </prognostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
