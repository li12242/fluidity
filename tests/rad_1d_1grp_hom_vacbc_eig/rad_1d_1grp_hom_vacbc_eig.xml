<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>rad_1d_1grp_hom_vacbc_eig</name>
  <owner userid="btollit"/>
  <tags>flml</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
fluidity rad_1d_1grp_hom_vacbc_eig_A.flml 

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_B.flml
sed -i 's/_A/_B/' rad_1d_1grp_hom_vacbc_eig_B.flml

fluidity rad_1d_1grp_hom_vacbc_eig_B.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_B.flml

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_C.flml
sed -i 's/_A/_C/' rad_1d_1grp_hom_vacbc_eig_C.flml

fluidity rad_1d_1grp_hom_vacbc_eig_C.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_C.flml

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_D.flml
sed -i 's/_A/_D/' rad_1d_1grp_hom_vacbc_eig_D.flml

fluidity rad_1d_1grp_hom_vacbc_eig_D.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_D.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_E.flml
sed -i 's/_A/_E/' rad_1d_1grp_hom_vacbc_eig_E.flml

fluidity rad_1d_1grp_hom_vacbc_eig_E.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_E.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_F.flml
sed -i 's/_A/_F/' rad_1d_1grp_hom_vacbc_eig_F.flml

fluidity rad_1d_1grp_hom_vacbc_eig_F.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_F.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_G.flml
sed -i 's/_A/_G/' rad_1d_1grp_hom_vacbc_eig_G.flml

fluidity rad_1d_1grp_hom_vacbc_eig_G.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_G.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_H.flml
sed -i 's/_A/_H/' rad_1d_1grp_hom_vacbc_eig_H.flml

fluidity rad_1d_1grp_hom_vacbc_eig_H.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_H.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_I.flml
sed -i 's/_A/_I/' rad_1d_1grp_hom_vacbc_eig_I.flml

fluidity rad_1d_1grp_hom_vacbc_eig_I.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_I.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_J.flml
sed -i 's/_A/_J/' rad_1d_1grp_hom_vacbc_eig_J.flml

fluidity rad_1d_1grp_hom_vacbc_eig_J.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_J.flml       

cp rad_1d_1grp_hom_vacbc_eig_A.flml rad_1d_1grp_hom_vacbc_eig_K.flml
sed -i 's/_A/_K/' rad_1d_1grp_hom_vacbc_eig_K.flml

fluidity rad_1d_1grp_hom_vacbc_eig_K.flml 

rm -f rad_1d_1grp_hom_vacbc_eig_K.flml       
    </command_line>
    <!-- Radiation diffusion eigenvalue problem with one material, one energy group with all vacuum BC using a 1d geometry compared to a fine mesh BEANS linear cg solution for different mesh resolutions checking against the expected rate of convergence-->
  </problem_definition>
  <variables>
    <variable name="neutronKeff_A" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_A = stat("rad_1d_1grp_hom_vacbc_eig_A.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_B" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_B = stat("rad_1d_1grp_hom_vacbc_eig_B.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_C" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_C = stat("rad_1d_1grp_hom_vacbc_eig_C.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_D" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_D = stat("rad_1d_1grp_hom_vacbc_eig_D.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_E" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_E = stat("rad_1d_1grp_hom_vacbc_eig_E.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_F" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_F = stat("rad_1d_1grp_hom_vacbc_eig_F.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_G" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_G = stat("rad_1d_1grp_hom_vacbc_eig_G.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_H" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_H = stat("rad_1d_1grp_hom_vacbc_eig_H.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_I" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_I = stat("rad_1d_1grp_hom_vacbc_eig_I.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_J" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_J = stat("rad_1d_1grp_hom_vacbc_eig_J.stat")["neutronKeff1"]["Value"][0]
    </variable>
    <variable name="neutronKeff_K" language="python">
from fluidity_tools import stat_parser as stat
neutronKeff_K = stat("rad_1d_1grp_hom_vacbc_eig_K.stat")["neutronKeff1"]["Value"][0]
    </variable>
  </variables>
  <pass_tests>
    <test name="Check neutronKeff_A against equivalent cg BEANS reference" language="python">
reference_keff = 0.852113610862
print 'Relative error compared to reference: ',abs((neutronKeff_A - reference_keff)/reference_keff)
assert abs((neutronKeff_A - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_B against equivalent cg BEANS reference" language="python">
reference_keff = 0.880058482051
print 'Relative error compared to reference: ',abs((neutronKeff_B - reference_keff)/reference_keff)
assert abs((neutronKeff_B - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_C against against equivalent cg BEANS reference" language="python">
reference_keff = 0.886868598269
print 'Relative error compared to reference: ',abs((neutronKeff_C - reference_keff)/reference_keff)
assert abs((neutronKeff_C - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_D against against equivalent cg BEANS reference" language="python">
reference_keff = 0.88856143693
print 'Relative error compared to reference: ',abs((neutronKeff_D - reference_keff)/reference_keff)
assert abs((neutronKeff_D - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_E against against equivalent cg BEANS reference" language="python">
reference_keff = 0.888984056312
print 'Relative error compared to reference: ',abs((neutronKeff_E - reference_keff)/reference_keff)
assert abs((neutronKeff_E - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_F against against equivalent cg BEANS reference" language="python">
reference_keff = 0.889089671645
print 'Relative error compared to reference: ',abs((neutronKeff_F - reference_keff)/reference_keff)
assert abs((neutronKeff_F - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_G against against equivalent cg BEANS reference" language="python">
reference_keff = 0.889116078741
print 'Relative error compared to reference: ',abs((neutronKeff_G - reference_keff)/reference_keff)
assert abs((neutronKeff_G - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_H against against equivalent cg BEANS reference" language="python">
reference_keff = 0.889122681105
print 'Relative error compared to reference: ',abs((neutronKeff_H - reference_keff)/reference_keff)
assert abs((neutronKeff_H - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_I against against equivalent cg BEANS reference" language="python">
reference_keff = 0.889124322876
print 'Relative error compared to reference: ',abs((neutronKeff_I - reference_keff)/reference_keff)
assert abs((neutronKeff_I - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_J against against equivalent cg BEANS reference" language="python">
reference_keff = 0.889124740121
print 'Relative error compared to reference: ',abs((neutronKeff_J - reference_keff)/reference_keff)
assert abs((neutronKeff_J - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_K against against equivalent cg BEANS reference" language="python">
reference_keff = 0.889124845372
print 'Relative error compared to reference: ',abs((neutronKeff_K - reference_keff)/reference_keff)
assert abs((neutronKeff_K - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
    <test name="Check neutronKeff_K against against very fine cg BEANS reference" language="python">
reference_keff = 0.889124884645
print 'Relative error compared to reference: ',abs((neutronKeff_K - reference_keff)/reference_keff)
assert abs((neutronKeff_K - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>

    <test name="Check neutronKeff_A to neutronKeff_B convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.889124884645

keff_one = neutronKeff_A
keff_two = neutronKeff_B

mesh_one = 2
mesh_two = 4

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 1.5e-02
    </test>
    <test name="Check neutronKeff_C to neutronKeff_D convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.889124884645

keff_one = neutronKeff_C
keff_two = neutronKeff_D

mesh_one = 8
mesh_two = 16

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 8.0e-04
    </test>
    <test name="Check neutronKeff_E to neutronKeff_F convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.889124884645

keff_one = neutronKeff_E
keff_two = neutronKeff_F

mesh_one = 32
mesh_two = 64

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 1.4e-04
    </test>
    <test name="Check neutronKeff_G to neutronKeff_H convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.889124884645

keff_one = neutronKeff_G
keff_two = neutronKeff_H

mesh_one = 128
mesh_two = 256

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 5.0e-03
    </test>
    <test name="Check neutronKeff_I to neutronKeff_J convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.889124884645

keff_one = neutronKeff_I
keff_two = neutronKeff_J

mesh_one = 512
mesh_two = 1024

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 1.8e-03
    </test>
    <test name="Check neutronKeff_B to neutronKeff_K convergence with regard to the fine mesh cg linear solution" language="python">
from math import log

reference_keff = 0.889124884645

keff_one = neutronKeff_B
keff_two = neutronKeff_K

mesh_one = 4
mesh_two = 2048

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 1.51e-01
    </test>


  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
