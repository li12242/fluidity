<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>rad_1d_3grp_hom_inf_eig</name>
  <owner userid="btollit"/>
  <tags>flml radiation</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
       ../../bin/fluidity rad_1d_3grp_hom_inf_eig.flml 
    </command_line>
    <!-- Radiation diffusion eigenvalue problem with 1 material, 3 energy groups no upscatter with all reflective BC using a 1d geometry compared to analytic solution for the keff and flux ratio, this is ABC problem 74-->
  </problem_definition>
  <variables>
    <variable name="ParticleKeffneutron" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffneutron = stat("rad_1d_3grp_hom_inf_eig.stat")["ParticleKeffneutron1"]["Value"][0]
    </variable>
    <variable name="FluxGroup1Moment1neutron" language="python">
import vtktools
v = vtktools.vtu("rad_1d_3grp_hom_inf_eig_1.vtu")
FluxGroup1Moment1neutron = max(v.GetScalarRange("ParticleFluxGroup1Moment1neutron"))
    </variable>
    <variable name="FluxGroup2Moment1neutron" language="python">
import vtktools
v = vtktools.vtu("rad_1d_3grp_hom_inf_eig_1.vtu")
FluxGroup2Moment1neutron = max(v.GetScalarRange("ParticleFluxGroup2Moment1neutron"))
    </variable>
    <variable name="FluxGroup3Moment1neutron" language="python">
import vtktools
v = vtktools.vtu("rad_1d_3grp_hom_inf_eig_1.vtu")
FluxGroup3Moment1neutron = max(v.GetScalarRange("ParticleFluxGroup3Moment1neutron"))
    </variable>    
  </variables>
  <pass_tests>
    <test name="Check ParticleKeffneutron against analytic with tolerance 1.0e-06" language="python">
analytic_keff = 1.6
print 'Relative error compared to analytic: ',abs((ParticleKeffneutron - analytic_keff)/analytic_keff)
assert abs((ParticleKeffneutron - analytic_keff)/analytic_keff) &lt; 1.0e-06
    </test>
    <test name="Check Flux ratio of group 2 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.480
flux_ratio = FluxGroup2Moment1neutron / FluxGroup1Moment1neutron 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux ratio of group 3 moment 1 to group 2 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.3125
flux_ratio = FluxGroup3Moment1neutron / FluxGroup2Moment1neutron 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
    <test name="Check Flux ratio of group 3 moment 1 to group 1 moment 1 against analytic with tolerance 1.0e-06" language="python">
analytic_flux_ratio = 0.15
flux_ratio = FluxGroup3Moment1neutron / FluxGroup1Moment1neutron 
print 'Relative error compared to analytic: ',abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio)
assert abs((flux_ratio - analytic_flux_ratio)/analytic_flux_ratio) &lt; 1.0e-06
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
