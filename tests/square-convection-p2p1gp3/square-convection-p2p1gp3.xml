<?xml version = "1.0" encoding = "UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>Square convection (Ra-10^3, P2-P1 with P3 geopressure version)</name>
  <owner userid="maddison"/>
  <tags>flml</tags>
  <problem_definition length = "medium" nprocs = "1">
    <command_line>make clean-run-debug; fluidity -v2 -l square-convection.flml</command_line>
  </problem_definition>
  <variables>
    <variable name = "times" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
times = s["ElapsedTime"]["value"]
    </variable>
    <variable name = "timesteps" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
timesteps = len(s["ElapsedTime"]["value"])
    </variable>
    <variable name = "max_cfl_numbers" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
max_cfl_numbers = s["Fluid"]["CFLNumber"]["max"]
    </variable>
    <variable name = "solvers_converged" language = "python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <variable name = "final_mid_line_u" language = "python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.utils as utils
import fluidity.diagnostics.vtutools as vtktools

vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"))[0])
line = vtktools.PlanarVtuCut(vtu, origin = (0.5, 0.0, 0.0), normal = (1.0, 0.0, 0.0))

coords = line.GetLocations()
vel = line.GetVectorField("Velocity")

z = [coord[1] for coord in coords]
u = [val[0] for val in vel]
z, u = utils.KeyedSort(z, u, returnSortedKeys = True)

final_mid_line_u = [(z[i], u[i]) for i in range(len(z))]
    </variable>
    <variable name = "final_mid_line_w" language = "python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.utils as utils
import fluidity.diagnostics.vtutools as vtktools

vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"))[0])
line = vtktools.PlanarVtuCut(vtu, origin = (0.0, 0.5, 0.0), normal = (0.0, 1.0, 0.0))

coords = line.GetLocations()
vel = line.GetVectorField("Velocity")

x = [coord[0] for coord in coords]
w = [val[1] for val in vel]
x, w = utils.KeyedSort(x, w, returnSortedKeys = True)

final_mid_line_w = [(x[i], w[i]) for i in range(len(x))]
    </variable>
    <variable name = "psi_mid" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.detectors")
psi_mid = s["Fluid"]["StreamFunction"]["MidPoint"]
    </variable>
    <variable name = "left_boundary_average_nus" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
left_boundary_average_nus = s["Fluid"]["Temperature"]["surface_integral%LeftH"]
    </variable>
    <variable name = "left_boundary_mid_height_nus" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.detectors")
left_boundary_mid_height_nus = s["Fluid"]["TemperatureGradient"]["LeftBoundaryMidHeight"][0]
left_boundary_mid_height_nus = [-val for val in left_boundary_mid_height_nus]
    </variable>
    <variable name = "final_left_boundary_nus" language = "python">
import fluidity.diagnostics.fluiditytools as fluidity_tools
import fluidity.diagnostics.vtutools as vtktools
    
vtu = vtktools.vtu(fluidity_tools.VtuFilenames("square-convection", fluidity_tools.FindMaxVtuId("square-convection"))[0])
coords = vtu.GetLocations()
gradT = vtu.GetVectorField("TemperatureGradient")
final_left_boundary_nus = []
for i, coord in enumerate(coords):
  if coord[0] &lt; 1.0e-6:
    final_left_boundary_nus.append((coord[1], -gradT[i][0]))
    </variable>
  </variables>
  <pass_tests>
<!--Crash tests-->
    <test name = "Simulation completed" language = "python">
print times[-1]
assert(times[-1] &lt; 20.0)
    </test>
    <test name = "Solvers converged" language = "python">
assert(solvers_converged)
    </test>
    <test name = "CFL number" language = "python">
print max(max_cfl_numbers)
assert(max(max_cfl_numbers) &lt;= 4.0 * 1.2)
    </test>
<!--Benchmark tests. Testing against benchmark values from:
  G. de Vahl Davis and I. P. Jones, Natural Convection In A Square Cavity: A Comparison Exercise, Int. J. for Num. Meth. in Fluids, vol. 3, 227-248 (1983)-->
    <test name = "Mid-line umax benchmark" language = "python">
import fluidity_tools
max = final_mid_line_u[0]
for z, u in final_mid_line_u[1:]:
  if u &gt; max[1]:
    max = (z, u)
fluidity_tools.compare_variable(max[0], 0.813, 0.03)
fluidity_tools.compare_variable(max[1], 3.649, 0.01)
    </test>
    <test name = "Mid-line wmax benchmark" language = "python">
import fluidity_tools
max = final_mid_line_w[0]
for x, w in final_mid_line_w[1:]:
  if w &gt; max[1]:
    max = (x, w)
fluidity_tools.compare_variable(max[0], 0.178, 0.15)
fluidity_tools.compare_variable(max[1], 3.697, 0.005)
    </test>
    <test name = "Mid-point streamfunction converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(psi_mid, 1.0e-3, test_count = 10)
    </test>
    <test name = "Mid-point streamfunction benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(abs(psi_mid[-1]), 1.174, 0.001)
    </test>
    <test name = "Left boundary average Nu converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(left_boundary_average_nus, 1.0e-3, test_count = 10)
    </test>
    <test name = "Left boundary average Nu benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(left_boundary_average_nus[-1], 1.118, 0.005)
    </test>
    <test name = "Left boundary mid-height Nu converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(left_boundary_mid_height_nus, 1.0e-3, test_count = 10)
    </test>
    <test name = "Left boundary mid-height Nu benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(left_boundary_mid_height_nus[-1], 1.118, 0.03)
    </test>
    <test name = "Final left boundary Nu extrema benchmarks" language = "python">
import fluidity_tools
min = final_left_boundary_nus[0]
max = final_left_boundary_nus[0]
for z, nu in final_left_boundary_nus[1:]:
  if nu &lt; min[1]:
    min = (z, nu)
  if nu &gt; max[1]:
    max = (z, nu)
print "Min Nu = " + str(min[1]) + " at z = " + str(min[0])
print "Max Nu = " + str(max[1]) + " at z = " + str(max[0])
fluidity_tools.compare_variable(min[0], 1.0, 0.01)
fluidity_tools.compare_variable(min[1], 0.692, 0.002)
assert(abs(max[0] - 0.092) &lt; 0.03)
fluidity_tools.compare_variable(max[1], 1.505, 0.01)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
