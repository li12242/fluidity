<?xml version='1.0' encoding='utf-8'?>
<testproblem>
  <name>FLML validation (Diamond version)</name>
  <owner userid="maddison"/>
  <tags>flml</tags>
  <problem_definition length="medium" nprocs="1">
    <command_line>true</command_line>
  </problem_definition>
  <variables>
    <variable name="ignoredOptionsFiles" language="python">ignoredOptionsFiles = []
try:
  warningsFile = open("ignored", "r")
except IOError:
  warningsFile = None
if warningsFile is None:
  ignoredOptionsFiles = []
else:
  ignoredOptionsFiles = warningsFile.readlines()
  for i, filename in enumerate(ignoredOptionsFiles):
    ignoredOptionsFiles[i] = filename[:-1]</variable>
    <variable name="warningOnlyOptionsFiles" language="python">warningOnlyOptionsFiles = []
try:
  warningsFile = open("warnings", "r")
except IOError:
  warningsFile = None
if warningsFile is None:
  warningOnlyOptionsFiles = []
else:
  warningOnlyOptionsFiles = warningsFile.readlines()
  for i, filename in enumerate(warningOnlyOptionsFiles):
    warningOnlyOptionsFiles[i] = filename[:-1]</variable>
    <variable name="optionErrors" language="python">import glob
import os
import sys
import xml.dom.minidom

import gtk.gdk

import diamond.debug as debug
import diamond.schema as schema

debug.SetDebugLevel(0)

class DiamondValidator:
  def __init__(self, rootDir, testDir, depth):
    self._rootDir = rootDir
    self._testDir = os.path.join(rootDir, testDir)
    self._depth = depth
    self.Reset()
    
    return
    
  def Reset(self):
    self._passes = 0
    self._optionErrors = {}
    
    return
    
  def ValidateOptionsFiles(self, schemafile, extension = None, xmlRootNode = None):
    debug.dprint("Validating options file against schema: " + schemafile, 0)
  
    schemafile = os.path.join(self._rootDir, schemafile)
    sch = schema.Schema(schemafile)

    if not extension is None:
      debug.dprint("Testing files with extension: " + extension, 0)
      for filename in self._TestFiles(extension): 
        optionsTree = sch.read(filename)
        lost_eles, added_eles = sch.read_errors()
        if len(lost_eles) + len(added_eles) == 0 and optionsTree.valid:
          debug.dprint(filename + " : Pass", 0)
          self._passes += 1
        else:
          debug.dprint(filename + " : Fail", 0)
          self._optionErrors[filename] = (lost_eles, added_eles)
          
    if not xmlRootNode is None:
      debug.dprint("Testing xml files with root node: " + xmlRootNode, 0)
      for filename in self._TestFiles("xml"):
        xmlParse = xml.dom.minidom.parse(filename)
        rootEles = xmlParse.getElementsByTagName(xmlRootNode)
        if len(rootEles) == 0:
          continue
        optionsTree = sch.read(filename)
        lost_eles, added_eles = sch.read_errors()
        if len(lost_eles) + len(added_eles) == 0 and optionsTree.valid:
          debug.dprint(filename + " : Pass", 0)
          self._passes += 1
        else:
          debug.dprint(filename + " : Fail", 0)
          self._optionErrors[filename] = (lost_eles, added_eles)
    
    return
    
  def _TestFiles(self, extension):
    filenames = []
    baseDir = self._testDir
    for i in range(self._depth + 1):
      filenames += glob.glob(os.path.join(baseDir, "*." + extension))
      baseDir = os.path.join(baseDir, "*")
    
    return filenames
    
  def Passes(self):
    return self._passes
    
  def OptionErrors(self):
    return self._optionErrors

validator = DiamondValidator(rootDir = os.path.join(os.path.pardir, os.path.pardir), testDir = "tests", depth = 1)
validator.ValidateOptionsFiles(os.path.join("tools", "test_options.rng"), xmlRootNode = "testproblem")
validator.ValidateOptionsFiles(os.path.join("tools", "fluidity_options.rng"), extension = "flml", xmlRootNode = "fluidity_options")
validator.ValidateOptionsFiles(os.path.join("tools", "shallow_water_options.rng"), extension = "swml")
#validator.ValidateOptionsFiles(os.path.join("qg_strat", "qg_strat_options.rng"), extension = "qgml")
    
passes = validator.Passes()
optionErrors = validator.OptionErrors()
    
print "Summary of options files with failures:"
for filename in optionErrors.keys():
  print filename
print "Passes: " + str(passes)
print "Failures: " + str(len(optionErrors))</variable>
  </variables>
  <pass_tests>
    <test name="Options files validate" language="python">failures = []
for filename in optionErrors.keys():
  if not filename in warningOnlyOptionsFiles and not filename in ignoredOptionsFiles:
    failures.append(filename)
print "Summary of options files with failures:"
for filename in failures:
  print filename
print "Failures: " + str(len(failures))
assert(len(failures) == 0)</test>
  </pass_tests>
  <warn_tests>
    <test name="Options files validate" language="python">failures = []
for filename in optionErrors.keys():
  if not filename in ignoredOptionsFiles:
    failures.append(filename)
print "Summary of options files with failures:"
for filename in failures:
  print filename
print "Failures: " + str(len(failures))
assert(len(failures) == 0)</test>
  </warn_tests>
</testproblem>
