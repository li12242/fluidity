<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>rad_square_2grp_hom_zerobc_tri_eig</name>
  <owner userid="btollit"/>
  <tags>flml radiation</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/fluidity rad_square_2grp_hom_zerobc_tri_eig_p1_A.flml 

cp rad_square_2grp_hom_zerobc_tri_eig_p1_A.flml rad_square_2grp_hom_zerobc_tri_eig_p1_B.flml
sed -i 's/_A/_B/' rad_square_2grp_hom_zerobc_tri_eig_p1_B.flml

../../bin/fluidity rad_square_2grp_hom_zerobc_tri_eig_p1_B.flml 

rm -f rad_square_2grp_hom_zerobc_tri_eig_p1_B.flml

../../bin/fluidity rad_square_2grp_hom_zerobc_tri_eig_p2_A.flml 

cp rad_square_2grp_hom_zerobc_tri_eig_p2_A.flml rad_square_2grp_hom_zerobc_tri_eig_p2_B.flml
sed -i 's/_A/_B/' rad_square_2grp_hom_zerobc_tri_eig_p2_B.flml

../../bin/fluidity rad_square_2grp_hom_zerobc_tri_eig_p2_B.flml 

rm -f rad_square_2grp_hom_zerobc_tri_eig_p2_B.flml

../../bin/fluidity rad_square_2grp_hom_zerobc_tri_eig_p3_A.flml 
    </command_line>
    <!-- Radiation diffusion eigenvalue problem with one material, two energy group with zero BC with 1/4 geom of square with strutured triangle mesh compared to BEANS solution for the keff as well as checking the mesh convergence of the keff for different polynomial degrees-->
  </problem_definition>
  <variables>
    <variable name="ParticleKeffNeutron_A_p1" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_A_p1 = stat("rad_square_2grp_hom_zerobc_tri_eig_p1_A.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffNeutron_B_p1" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_B_p1 = stat("rad_square_2grp_hom_zerobc_tri_eig_p1_B.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffNeutron_A_p2" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_A_p2 = stat("rad_square_2grp_hom_zerobc_tri_eig_p2_A.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffNeutron_B_p2" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_B_p2 = stat("rad_square_2grp_hom_zerobc_tri_eig_p2_B.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffNeutron_A_p3" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_A_p3 = stat("rad_square_2grp_hom_zerobc_tri_eig_p3_A.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
  </variables>
  <pass_tests>
    <test name="Check ParticleKeffNeutron_A_p1 to ParticleKeffNeutron_B_p1 convergence with regard to the fine mesh BEANS solution" language="python">
from math import log

reference_keff = 1.00000100601

keff_one = ParticleKeffNeutron_A_p1
keff_two = ParticleKeffNeutron_B_p1

mesh_one = 5
mesh_two = 10

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 1.8e-02
    </test>
    <test name="Check ParticleKeffNeutron_A_p2 to ParticleKeffNeutron_B_p2 convergence with regard to the fine mesh BEANS solution" language="python">
from math import log

reference_keff = 1.00000100601

keff_one = ParticleKeffNeutron_A_p2
keff_two = ParticleKeffNeutron_B_p2

mesh_one = 5
mesh_two = 10

expected_convergence_ratio = 3.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 3rd order:',relative_error

assert relative_error &lt; 8.2e-02
    </test>
    <test name="Check ParticleKeffNeutron_B_p1 against BEANS fine reference with tolerance 3.0e-04" language="python">
reference_keff = 1.00000100601
print 'Relative error compared to reference ',abs((ParticleKeffNeutron_B_p1 - reference_keff)/reference_keff)
assert abs((ParticleKeffNeutron_B_p1 - reference_keff)/reference_keff) &lt; 3.0e-04
    </test>
    <test name="Check ParticleKeffNeutron_B_p2 against BEANS fine reference with tolerance 2.0e-06" language="python">
reference_keff = 1.00000100601
print 'Relative error compared to reference ',abs((ParticleKeffNeutron_B_p2 - reference_keff)/reference_keff)
assert abs((ParticleKeffNeutron_B_p2 - reference_keff)/reference_keff) &lt; 2.0e-06
    </test>
    <test name="Check ParticleKeffNeutron_A_p3 against BEANS fine reference with tolerance 1.0e-06" language="python">
reference_keff = 1.00000100601
print 'Relative error compared to reference ',abs((ParticleKeffNeutron_A_p3 - reference_keff)/reference_keff)
assert abs((ParticleKeffNeutron_A_p3 - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
