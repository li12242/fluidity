<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">test</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">porous_media</string_value>
  </problem_type>
  <geometry>
    <dimension replaces="NDIM">
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="test">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree replaces="NGI">
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant replaces="TIMDUM">
        <real_value rank="0">0.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="PressureMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time replaces="ACCTIM">
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep replaces="DT">
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time replaces="LTIME">
      <real_value rank="0">10.0</real_value>
    </finish_time>
    <nonlinear_iterations replaces="ITINOI">
      <integer_value rank="0">2</integer_value>
    </nonlinear_iterations>
    <steady_state>
      <tolerance replaces="STEDER">
        <real_value rank="0">1.0e-3</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters/>
  <material_phase name="Material1">
    <equation_of_state>
      <fluids>
        <linear replaces="EQNSTA=0 or 1">
          <reference_density replaces="DENINI">
            <real_value rank="0">1.0</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term replaces="NOFILT"/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution replaces="POISON">
            <string_value lines="1">only first timestep</string_value>
          </poisson_pressure_solution>
          <use_projection_method replaces="PROJEC"/>
        </scheme>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="mg"/>
          <relative_error>
            <real_value rank="0">1.0e-12</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <print_norms/>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(r,t):
  from math import sqrt,pi,log
  w1 = [-10.0,0.0] 
  w2 = [10.0,0.0]
  kx = 10.0
  ky = 1.0
  h = 1.0
  q1 = 1.0
  q2 = -1.0
  mu = 0.001
  c = -mu/(4.0*pi*h*sqrt(kx*ky))
  p = c*q1*log((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  p += c*q2*log((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  return p</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <lump_mass_matrix/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <tensor_form/>
            </stress_terms>
          </continuous_galerkin>
          <conservative_advection replaces="BETA">
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta replaces="THETA">
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation replaces="ITHETA">
            <real_value rank="0">0.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(r,t):
  from math import sqrt,pi
  w1 = [-10.0,0.0] 
  w2 = [10.0,0.0]
  kx = 10.0
  ky = 1.0
  phi = 0.15
  h = 1.0
  q1 = 1.0
  q2 = -1.0
  c = 1.0/(2.0*pi*h*phi)*sqrt(kx/ky)
  vx = c*q1*(r[0]-w1[0])/((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  vx += c*q2*(r[0]-w2[0])/((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  vy = c*q1*(r[1]-w1[1])/((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  vy += c*q2*(r[1]-w2[1])/((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  return (vx,vy)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions replaces="boundary, TMPER1 TMPER2 TMPERI" name="wells">
          <surface_ids>
            <integer_value shape="8" rank="1">18 19 20 21 22 23 24 25</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly>
              <boundary_overwrites_initial_condition/>
            </apply_weakly>
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value lines="20" type="python">def val(r,t):
  from math import sqrt,pi
  w1 = [-10.0,0.0] 
  w2 = [10.0,0.0]
  kx = 10.0
  ky = 1.0
  phi = 0.15
  h = 1.0
  q1 = 1.0
  q2 = -1.0
  c = 1.0/(2.0*pi*h*phi)*sqrt(kx/ky)
  vx = c*q1*(r[0]-w1[0])/((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  vx += c*q2*(r[0]-w2[0])/((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  return vx</string_value>
                </python>
              </x_component>
              <y_component>
                <python>
                  <string_value lines="20" type="python">def val(r,t):
  from math import sqrt,pi
  w1 = [-10.0,0.0] 
  w2 = [10.0,0.0]
  kx = 10.0
  ky = 1.0
  phi = 0.15
  h = 1.0
  q1 = 1.0
  q2 = -1.0
  c = 1.0/(2.0*pi*h*phi)*sqrt(kx/ky)
  vy = c*q1*(r[1]-w1[1])/((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  vy += c*q2*(r[1]-w2[1])/((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  return vy</string_value>
                </python>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field replaces="MUPTXX MUPTYY MUPTZZ MUPTYZ MUPTXZ MUPTXY RMUPXX RMUPYY RMUPZZ RMUPYZ RMUPXZ RMUPXY CONMU ALLMU TWOMU ONEMU" name="Viscosity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <constant>
                  <real_value rank="0">0.001</real_value>
                </constant>
              </isotropic>
            </value>
            <output/>
          </prescribed>
        </tensor_field>
        <vector_field replaces="XABSZE YABSZE ZABSZE XABS YABS ZABS XABSOR YABSOR ZABSOR XABSCO YABSCO ZABSCO" name="Absorption" rank="1">
          <diagnostic>
            <algorithm name="Internal" material_phase_support="multiple"/>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <include_in_steady_state/>
            </steady_state>
          </diagnostic>
          <include_pressure_correction/>
        </vector_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field name="AnalyticalPressure" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(r,t):
  from math import sqrt,pi,log
  w1 = [-10.0,0.0] 
  w2 = [10.0,0.0]
  kx = 10.0
  ky = 1.0
  h = 1.0
  q1 = 1.0
  q2 = -1.0
  mu = 0.001
  c = -mu/(4.0*pi*h*sqrt(kx*ky))
  p = c*q1*log((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  p += c*q2*log((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  return p</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <vector_field name="AnalyticalVelocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(r,t):
  from math import sqrt,pi
  w1 = [-10.0,0.0] 
  w2 = [10.0,0.0]
  kx = 10.0
  ky = 1.0
  phi = 0.15
  h = 1.0
  q1 = 1.0
  q2 = -1.0
  c = 1.0/(2.0*pi*h*phi)*sqrt(kx/ky)
  vx = c*q1*(r[0]-w1[0])/((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  vx += c*q2*(r[0]-w2[0])/((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  vy = c*q1*(r[1]-w1[1])/((r[0]-w1[0])**2.0+(kx/ky)*(r[1]-w1[1])**2.0)
  vy += c*q2*(r[1]-w2[1])/((r[0]-w2[0])**2.0+(kx/ky)*(r[1]-w2[1])**2.0)
  return (vx,vy)</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
  </material_phase>
  <porous_media>
    <scalar_field name="Porosity">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value rank="0">0.15</real_value>
          </constant>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </scalar_field>
    <vector_field name="Permeability">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">10.0 1.0</real_value>
          </constant>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
  </porous_media>
</fluidity_options>
