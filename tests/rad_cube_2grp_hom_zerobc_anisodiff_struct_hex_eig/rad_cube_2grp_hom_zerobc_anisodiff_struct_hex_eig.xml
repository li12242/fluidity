<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig</name>
  <owner userid="btollit"/>
  <tags>flml radiation</tags>
  <problem_definition length="short" nprocs="1">
    <command_line>
../../bin/fluidity rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_A.flml 

cp rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_A.flml rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_B.flml 
sed -i 's/_A/_B/' rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_B.flml

../../bin/fluidity rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_B.flml 

rm -f rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_B.flml
    </command_line>
    <!-- Radiation diffusion eigenvalue problem with one material, anisotropic diffusion coeff two energy group with all zero BC with 1/8 geom of cube with structured hex mesh compared to Nodal method (PANTHER) solution and BEANS for the keff-->
  </problem_definition>
  <variables>
    <variable name="ParticleKeffNeutron_A" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_A = stat("rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_A.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
    <variable name="ParticleKeffNeutron_B" language="python">
from fluidity_tools import stat_parser as stat
ParticleKeffNeutron_B = stat("rad_cube_2grp_hom_zerobc_anisodiff_struct_hex_eig_q1_B.stat")["ParticleKeffNeutron"]["Value"][0]
    </variable>
  </variables>
  <pass_tests>
    <test name="Check ParticleKeffNeutron_A to ParticleKeffNeutron_B convergence with regard to the fine mesh BEANS solution" language="python">
from math import log

reference_keff = 0.867898542753

keff_one = ParticleKeffNeutron_A
keff_two = ParticleKeffNeutron_B

mesh_one = 10
mesh_two = 20

expected_convergence_ratio = 2.0

keff_one_error = abs((keff_one - reference_keff)/reference_keff) 
keff_two_error = abs((keff_two - reference_keff)/reference_keff) 

convergence_ratio = abs(  log(keff_two_error / keff_one_error)  /  log(mesh_two / mesh_one)  )

print 'Convergence Ratio:',convergence_ratio

relative_error = abs((convergence_ratio - expected_convergence_ratio) / expected_convergence_ratio)

print 'Relative error of convergence_ratio to expected 2nd order:',relative_error

assert relative_error &lt; 2.4e-03
    </test>
    <test name="Check ParticleKeffNeutron_B against Nodal method reference with tolerance 2.0e-4" language="python">
reference_keff = 0.8679026
print 'Relative error compared to reference ',abs((ParticleKeffNeutron_B - reference_keff)/reference_keff)
assert abs((ParticleKeffNeutron_B - reference_keff)/reference_keff) &lt; 2.0e-4
    </test>
    <test name="Check ParticleKeffNeutron_B against BEANS fine mesh reference with tolerance 2.0e-04" language="python">
reference_keff = 0.867898542753
print 'Relative error compared to reference ',abs((ParticleKeffNeutron_B - reference_keff)/reference_keff)
assert abs((ParticleKeffNeutron_B - reference_keff)/reference_keff) &lt; 2.0e-04
    </test>
    <test name="Check ParticleKeffNeutron_B against BEANS same mesh reference with tolerance 1.0e-06" language="python">
reference_keff = 0.867746918288
print 'Relative error compared to reference ',abs((ParticleKeffNeutron_B - reference_keff)/reference_keff)
assert abs((ParticleKeffNeutron_B - reference_keff)/reference_keff) &lt; 1.0e-06
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
