<?xml version="1.0" encoding="utf-8" ?>
<shallow_water_options>
    <simulation_name>
        <string_value lines="1">fsphere_C</string_value>
    </simulation_name>
    <geometry>
        <dimension>
            <integer_value rank="0">3</integer_value>
        </dimension>
        <mesh name="CoordinateMesh">
            <from_file file_name="src/sphere_C">
                <format name="triangle"></format>
                <dimension>
                    <integer_value rank="0">2</integer_value>
                </dimension>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
            </from_file>
        </mesh>
        <mesh name="VelocityMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_continuity>
                    <string_value>discontinuous</string_value>
                </mesh_continuity>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <mesh name="PressureMesh">
            <from_mesh>
                <mesh name="CoordinateMesh"></mesh>
                <mesh_shape>
                    <polynomial_degree>
                        <integer_value rank="0">2</integer_value>
                    </polynomial_degree>
                </mesh_shape>
                <stat>
                    <exclude_from_stat></exclude_from_stat>
                </stat>
            </from_mesh>
        </mesh>
        <quadrature>
            <degree>
                <integer_value rank="0">4</integer_value>
            </degree>
        </quadrature>
    </geometry>
    <io>
        <dump_format>
            <string_value>vtk</string_value>
        </dump_format>
        <dump_period>
            <constant>
                <real_value rank="0">1</real_value>
            </constant>
        </dump_period>
        <output_mesh name="VelocityMesh"></output_mesh>
    </io>
    <timestepping>
        <current_time>
            <real_value rank="0">0</real_value>
        </current_time>
        <timestep>
            <real_value rank="0">1117.85334</real_value>
        </timestep>
        <nonlinear_iterations>
            <integer_value rank="0">1</integer_value>
        </nonlinear_iterations>
        <finish_time>
            <real_value rank="0">44714.1334</real_value>
        </finish_time>
    </timestepping>
    <physical_parameters>
        <gravity>
            <magnitude>
                <real_value rank="0">1</real_value>
            </magnitude>
            <vector_field name="GravityDirection" rank="1">
                <prescribed>
                    <mesh name="CoordinateMesh"></mesh>
                    <value name="WholeMesh">
                        <python>
                            <string_value lines="20" type="python">from fluidity.spheretools import spherical_down&#x0A;val=spherical_down()</string_value>
                        </python>
                    </value>
                    <output></output>
                    <stat>
                        <include_in_stat></include_in_stat>
                    </stat>
                    <detectors>
                        <exclude_from_detectors></exclude_from_detectors>
                    </detectors>
                    <adjoint_storage>
                        <exists_in_forward></exists_in_forward>
                    </adjoint_storage>
                </prescribed>
            </vector_field>
        </gravity>
    </physical_parameters>
    <material_phase name="Fluid">
        <vector_field name="Velocity" rank="1">
            <prognostic>
                <mesh name="VelocityMesh"></mesh>
                <equation name="ShallowWater"></equation>
                <spatial_discretisation>
                    <discontinuous_galerkin>
                        <advection_scheme>
                            <none></none>
                        </advection_scheme>
                    </discontinuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <solver>
                    <iterative_method name="preonly"></iterative_method>
                    <preconditioner name="lu"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">1000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;  from fluidity.spheretools import cart2polar, polar2cart&#x0A;  from constants_2d import r&#x0A;  import constants_2d  &#x0A;  from math import sin, cos &#x0A;  import numpy&#x0A;  [theta, phi] = cart2polar(X)&#x0A;  res = constants_2d.u_exact([theta, phi], t)&#x0A;  # Res is a function on the spherical basis, we transform it to cartesian coordinates&#x0A;  # v1 is the derivative of polar2cart wrt to theta&#x0A;  v1 = [-sin(theta)*cos(phi), cos(theta)*cos(phi),0]&#x0A;  # Normalise&#x0A;  v1 = numpy.array(v1)/(sum([x*x for x in v1]))**0.5&#x0A;  # v2 is the derivative of polar2cart wrt to phi&#x0A;  v2 = [-cos(theta)*sin(phi),-sin(theta)*sin(phi), cos(phi)]  &#x0A;  # Normalise  &#x0A;  v2 = numpy.array(v2)/(sum([x*x for x in v2]))**0.5  &#x0A;  # Now the transformation&#x0A;  res_std = numpy.array(res[0]) * v1 + numpy.array(res[1]) * v2&#x0A;  return res_std</string_value>
                    </python>
                </initial_condition>
                <vector_field name="Source" rank="1">
                    <prescribed>
                        <value name="WholeMesh">
                            <python>
                                <string_value lines="20" type="python">def val(X, t):&#x0A;  from fluidity.spheretools import cart2polar, polar2cart&#x0A;  from constants_2d import r&#x0A;  import constants_2d  &#x0A;  from math import sin, cos &#x0A;  import numpy&#x0A;  [theta, phi] = cart2polar(X)&#x0A;  res = constants_2d.u_src([theta, phi], t)&#x0A;  # Res is a function on the spherical basis, we transform it to cartesian coordinates&#x0A;  # v1 is the derivative of polar2cart wrt to theta&#x0A;  v1 = [-sin(theta)*cos(phi), cos(theta)*cos(phi),0]&#x0A;  # Normalise&#x0A;  v1 = numpy.array(v1)/(sum([x*x for x in v1]))**0.5&#x0A;  # v2 is the derivative of polar2cart wrt to phi&#x0A;  v2 = [-cos(theta)*sin(phi),-sin(theta)*sin(phi), cos(phi)]  &#x0A;  # Normalise  &#x0A;  v2 = numpy.array(v2)/(sum([x*x for x in v2]))**0.5  &#x0A;  # Now the transformation&#x0A;  res_std = numpy.array(res[0]) * v1 + numpy.array(res[1]) * v2&#x0A;  return res_std</string_value>
                            </python>
                        </value>
                        <output></output>
                        <stat>
                            <include_in_stat></include_in_stat>
                        </stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                        <adjoint_storage>
                            <exists_in_forward></exists_in_forward>
                        </adjoint_storage>
                    </prescribed>
                </vector_field>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                    <previous_time_step>
                        <exclude_from_stat></exclude_from_stat>
                    </previous_time_step>
                    <nonlinear_field>
                        <exclude_from_stat></exclude_from_stat>
                    </nonlinear_field>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </vector_field>
        <scalar_field name="LayerThickness" rank="0">
            <prognostic>
                <mesh name="PressureMesh"></mesh>
                <spatial_discretisation>
                    <continuous_galerkin>
                        <advection_terms>
                            <exclude_advection_terms></exclude_advection_terms>
                        </advection_terms>
                    </continuous_galerkin>
                    <conservative_advection>
                        <real_value rank="0">0</real_value>
                    </conservative_advection>
                </spatial_discretisation>
                <temporal_discretisation>
                    <theta>
                        <real_value rank="0">0.5</real_value>
                    </theta>
                    <relaxation>
                        <real_value rank="0">1</real_value>
                    </relaxation>
                </temporal_discretisation>
                <solver>
                    <iterative_method name="preonly"></iterative_method>
                    <preconditioner name="lu"></preconditioner>
                    <relative_error>
                        <real_value rank="0">1e-07</real_value>
                    </relative_error>
                    <max_iterations>
                        <integer_value rank="0">2000</integer_value>
                    </max_iterations>
                    <never_ignore_solver_failures></never_ignore_solver_failures>
                    <diagnostics>
                        <monitors></monitors>
                    </diagnostics>
                </solver>
                <initial_condition name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;  from fluidity.spheretools import cart2polar, polar2cart&#x0A;  import constants_2d&#x0A;  xpo = cart2polar(X)&#x0A;  # Function code&#x0A;  return 0.0 #constants_2d.eta_exact(xpo, t)</string_value>
                    </python>
                </initial_condition>
                <mean_layer_thickness>
                    <real_value rank="0">1</real_value>
                </mean_layer_thickness>
                <scalar_field name="Source">
                    <prescribed>
                        <value name="WholeMesh">
                            <python>
                                <string_value lines="20" type="python">def val(X, t):&#x0A;  from fluidity.spheretools import cart2polar, polar2cart&#x0A;  import constants_2d  &#x0A;  xpo = cart2polar(X)&#x0A;  return constants_2d.eta_src(xpo, t)</string_value>
                            </python>
                        </value>
                        <output></output>
                        <stat></stat>
                        <detectors>
                            <exclude_from_detectors></exclude_from_detectors>
                        </detectors>
                        <adjoint_storage>
                            <exists_in_forward></exists_in_forward>
                        </adjoint_storage>
                    </prescribed>
                </scalar_field>
                <output></output>
                <stat></stat>
                <consistent_interpolation></consistent_interpolation>
            </prognostic>
        </scalar_field>
        <scalar_field name="AnalyticalLayerThickness" rank="0">
            <prescribed>
                <mesh name="PressureMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;  from fluidity.spheretools import cart2polar, polar2cart&#x0A;  import constants_2d&#x0A;  xpo = cart2polar(X)&#x0A;  # Function code&#x0A;  return constants_2d.eta_exact(xpo, t)</string_value>
                    </python>
                </value>
                <output></output>
                <stat></stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </prescribed>
        </scalar_field>
        <scalar_field name="LayerThicknessError" rank="0">
            <diagnostic>
                <algorithm name="scalar_difference" source_field_2_type="scalar" source_field_1_name="LayerThickness" source_field_2_name="AnalyticalLayerThickness" material_phase_support="single" source_field_1_type="scalar">
                    <absolute_difference></absolute_difference>
                </algorithm>
                <mesh name="PressureMesh"></mesh>
                <output></output>
                <stat></stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </diagnostic>
        </scalar_field>
        <vector_field name="AnalyticalVelocity" rank="1">
            <prescribed>
                <mesh name="VelocityMesh"></mesh>
                <value name="WholeMesh">
                    <python>
                        <string_value lines="20" type="python">def val(X, t):&#x0A;  from fluidity.spheretools import cart2polar, polar2cart&#x0A;  from constants_2d import r&#x0A;  import constants_2d  &#x0A;  from math import sin, cos &#x0A;  import numpy&#x0A;  [theta, phi] = cart2polar(X)&#x0A;  res = constants_2d.u_exact([theta, phi], t)&#x0A;  # Res is a function on the spherical basis, we transform it to cartesian coordinates&#x0A;  # v1 is the derivative of polar2cart wrt to theta&#x0A;  v1 = [-sin(theta)*cos(phi), cos(theta)*cos(phi),0]&#x0A;  # Normalise&#x0A;  v1 = numpy.array(v1)/(sum([x*x for x in v1]))**0.5&#x0A;  # v2 is the derivative of polar2cart wrt to phi&#x0A;  v2 = [-cos(theta)*sin(phi),-sin(theta)*sin(phi), cos(phi)]  &#x0A;  # Normalise  &#x0A;  v2 = numpy.array(v2)/(sum([x*x for x in v2]))**0.5  &#x0A;  # Now the transformation&#x0A;  res_std = numpy.array(res[0]) * v1 + numpy.array(res[1]) * v2&#x0A;  return res_std</string_value>
                    </python>
                </value>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <detectors>
                    <exclude_from_detectors></exclude_from_detectors>
                </detectors>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </prescribed>
        </vector_field>
        <vector_field name="VelocityError" rank="1">
            <diagnostic>
                <algorithm name="vector_difference" source_field_2_type="vector" source_field_1_name="Velocity" source_field_2_name="AnalyticalVelocity" material_phase_support="single" source_field_1_type="vector">
                    <absolute_difference></absolute_difference>
                </algorithm>
                <mesh name="VelocityMesh"></mesh>
                <output></output>
                <stat>
                    <include_in_stat></include_in_stat>
                </stat>
                <convergence>
                    <include_in_convergence></include_in_convergence>
                </convergence>
                <detectors>
                    <include_in_detectors></include_in_detectors>
                </detectors>
                <steady_state>
                    <include_in_steady_state></include_in_steady_state>
                </steady_state>
                <adjoint_storage>
                    <exists_in_forward></exists_in_forward>
                </adjoint_storage>
            </diagnostic>
        </vector_field>
    </material_phase>
    <debug>
        <check_inverse_coriolis_matrix></check_inverse_coriolis_matrix>
        <check_wave_matrix></check_wave_matrix>
        <check_solution></check_solution>
    </debug>
    <adjoint>
        <functional name="integral_eta">
            <functional_value>
                <algorithm name="functional_value">
                    <string_value lines="20" type="python">J = 0.0&#x0A;T = 44714.1334&#x0A;if time == 0.0 or time &lt; 44714.1334 &lt;= time+dt:&#x0A;  import numpy&#x0A;  eta_prev = states[n-1][&quot;Fluid&quot;].scalar_fields[&quot;LayerThickness&quot;]     &#x0A;  eta_prev_exact   = states[n-1][&quot;Fluid&quot;].scalar_fields[&quot;AnalyticalLayerThickness&quot;]       &#x0A;  if time == 0.0:&#x0A;    tmp_eta = eta_prev.val - eta_prev_exact.val&#x0A;  else:  &#x0A;    eta   = states[n][&quot;Fluid&quot;].scalar_fields[&quot;LayerThickness&quot;] &#x0A;    eta_exact   = states[n][&quot;Fluid&quot;].scalar_fields[&quot;AnalyticalLayerThickness&quot;] &#x0A;    # We want to temporally interpolate to evaluate eta at t=T&#x0A;    alpha = (time + dt - T) / dt&#x0A;    assert 0 &lt;= alpha &lt; 1&#x0A;    tmp_eta = alpha * (eta_prev.val - eta_prev_exact.val) + (1-alpha) * (eta.val - eta_exact.val)&#x0A;&#x0A;  # Now we want to integrate that over space&#x0A;  coord = states[0][&quot;Fluid&quot;].vector_fields[&quot;Coordinate&quot;]&#x0A;  assert eta_prev.element_count == coord.element_count&#x0A;  for ele in range(coord.element_count):&#x0A;    t = Transform(ele, coord)&#x0A;    shape = eta_prev.ele_shape(ele)&#x0A;    mass = t.shape_shape(shape, shape)&#x0A;    nodes = eta_prev.ele_nodes(ele)&#x0A;    J = J + numpy.dot(tmp_eta[nodes], numpy.dot(mass, tmp_eta[nodes]))&#x0A;print &quot;Functional value&quot;, J    </string_value>
                </algorithm>
                <reduction>
                    <sum></sum>
                </reduction>
            </functional_value>
            <functional_dependencies>
                <algorithm name="functional_dependencies">
                    <string_value lines="20" type="python">def dependencies(times, timestep):&#x0A;  if times[0] &lt;= 0.0 &lt; times[1]:&#x0A;    return {&quot;Fluid::Coordinate&quot;: [0],&#x0A;            &quot;Fluid::LayerThickness&quot;:  [timestep-1],&#x0A;            &quot;Fluid::AnalyticalLayerThickness&quot;: [timestep-1] &#x0A;            }&#x0A;  elif times[0] &lt; 44714.1334 &lt;= times[1]:&#x0A;    return {&quot;Fluid::Coordinate&quot;: [0],&#x0A;            &quot;Fluid::LayerThickness&quot;: [timestep-1, timestep],&#x0A;            &quot;Fluid::AnalyticalLayerThickness&quot;: [timestep-1, timestep]            &#x0A;            }            &#x0A;  else:&#x0A;    return {}</string_value>
                </algorithm>
            </functional_dependencies>
        </functional>
        <controls>
            <control name="InitEta">
                <type name="initial_condition" field_name="Fluid::LayerThickness"></type>
            </control>
            <load_controls></load_controls>
        </controls>
    </adjoint>
</shallow_water_options>
