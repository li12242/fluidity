<?xml version='1.0' encoding='utf-8'?>
<burgers_equation>
  <simulation_name>
    <string_value lines="1">mms_adjoint_D</string_value>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="mms_D">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>vtk</dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">100000</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <material_phase name="Fluid">
    <scalar_field name="Velocity" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">200</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">0.0</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1.0e-13</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">100000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  x = X[0]
  return 0.0</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="zero">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <viscosity>
          <real_value rank="0">1.0</real_value>
        </viscosity>
        <stat/>
        <adjoint_storage>
          <exists_in_both>
            <record/>
          </exists_in_both>
        </adjoint_storage>
      </prognostic>
    </scalar_field>
    <scalar_field name="AdjointFinalSource" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  theta = 0.5
  x = X[0]
  return x**3 - 6*theta*x - 100*x</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_both/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="MAdjointFinalSource" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import numpy

# Multiply AdjointFinalSource by the mass matrix

adjsrc = state.scalar_fields["AdjointFinalSource"]
coord  = state.vector_fields["Coordinate"]

for ele in range(field.element_count):
  t = Transform(ele, coord)
  shape = adjsrc.ele_shape(ele)
  m = t.shape_shape(shape, shape)
  field.addto(field.ele_nodes(ele), numpy.dot(m, adjsrc.ele_val(ele)))</string_value>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_both>
            <record/>
          </exists_in_both>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="AdjointInitialValue" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  theta = 0.5
  x = X[0]
  return x**3 + 6*theta*x - 106*x</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="AnalyticalAdjointVelocity" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import numpy

coord = state.vector_fields["Coordinate"]
adjini = state.scalar_fields["AdjointInitialValue"] # still need to multiply this by M

if time == 1.0:
  # we have chosen lambda_1 to set up this problem, see the .sage
  for node in range(field.node_count):
    x = coord[node][0]
    field[node] = (x + 10) * x * (x - 10)
elif time == 0.0:
  # we need to multiply AdjointInitialValue by the mass matrix
  for ele in range(field.element_count):
    t = Transform(ele, coord)
    shape = adjini.ele_shape(ele)
    m = t.shape_shape(shape, shape)
    field.addto(field.ele_nodes(ele), numpy.dot(m, adjini.ele_val(ele)))
else:
  print "Warning: should only be called with time == 0.0 and time == 1.0!"</string_value>
          <depends>
            <string_value lines="1">MAdjointFinalSource</string_value>
          </depends>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="AdjointError" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">soln = state.scalar_fields["AdjointVelocity"]
exact = state.scalar_fields["AnalyticalAdjointVelocity"]

for node in range(field.node_count):
  field[node] = soln[node] - exact[node]
  
# I don't know what the right boundary values for the adjoint are
field[0] = 0.0; field[-1] = 0.0</string_value>
          <depends>
            <string_value lines="1">AnalyticalAdjointVelocity</string_value>
          </depends>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <adjoint>
    <functional_derivative>
      <algorithm name="functional_derivative">
        <string_value lines="20" type="python">import numpy


src = states[n]["Fluid"].scalar_fields["MAdjointFinalSource"]

du = derivatives["FluidDerivatives"].scalar_fields["VelocityDerivative"]

if time == 0.0:
  du.val[:] = 0.0
elif time == 1.0:
  du.val[:] = src.val
  du[0] = 0.0; du[-1] = 0.0
else:
  print "Warning: should only be called with time == 0.0 and time == 1.0!"</string_value>
      </algorithm>
    </functional_derivative>
  </adjoint>
</burgers_equation>
