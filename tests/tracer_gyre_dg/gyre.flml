<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">gyre</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">oceans</string_value>
  </problem_type>
  <geometry>
    <dimension replaces="NDIM">
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="gyre">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree replaces="NGI">
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period replaces="TIMDUM">
      <real_value rank="0">4.999999E5</real_value>
    </dump_period>
    <output_mesh name="VelocityMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time replaces="ACCTIM">
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep replaces="DT">
      <real_value rank="0">2.5e4</real_value>
    </timestep>
    <finish_time replaces="LTIME">
      <real_value rank="0">1.0E7</real_value>
    </finish_time>
  </timestepping>
  <physical_parameters/>
  <material_phase name="Water">
    <vector_field name="Velocity" rank="1">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="whole_mesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
    from math import pi,exp,sin,cos,sqrt
    L    = 1.0e+6       # the domain is a L-by-L m^2 square
    beta = 1.0e-11      # Coriolis paramter 1st order y-derivative [(ms)^-1]
    f0   = 1.0e-4       # Coriolis parameter [s^-1]
    drag = 1.0e-6       # bottom drag coefficient [s^-1]
    g    = 1.0e+1       # gravity [m*s^-2]
    H    = 2.0e+2       # constant depth [m]
    rho  = 1.0e+3       # water density [kg*m^-3]
    wind = 1.0e-1       # wind stress [N*m^-2]
    
    x=X[0]/L
    y=X[1]/L
    epsilon  = drag/(L*beta)
    Rp   = (-1 + sqrt(1+4*pi*pi*epsilon*epsilon))/(2*epsilon)
    Rm   = (-1 - sqrt(1+4*pi*pi*epsilon*epsilon))/(2*epsilon)
    eP    = exp(Rp)
    eM    = exp(Rm)
    ePx   = exp(Rp*x)
    eMx   = exp(Rm*x)
    U_scale  = wind/(rho*H*drag*pi)
    
    U=(-U_scale*cos(pi*y)*pi*(1 + ((eM-1)*ePx + (1-eP)*eMx)/(eP-eM)),
          U_scale*sin(pi*y)*((eM-1)*ePx*Rp + (1-eP)*eMx*Rm)/(eP-eM))
    return U</string_value>
          </python>
        </value>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
      </prescribed>
    </vector_field>
    <scalar_field replaces="IDENT = 666" name="Tracer" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin replace="70 &lt;= DISOTT &lt;= 90">
            <advection_scheme>
              <upwind/>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <bassi_rebay/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection replaces="TBETA, DEFALT (TBETA = 0.0)">
            <real_value rank="0">1.</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta replaces="TTHETA, DEFALT (TTHETA = 0.5)">
            <real_value rank="0">0.5</real_value>
          </theta>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">0</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="whole_mesh">
          <python>
            <string_value lines="20" type="python">def val(X,t):
    from numpy import matrix
    from math import exp
    L=1.0e+6
    return 10.0 * exp(-((X[0] - 2.0*L/3.0)**2 + (X[1] - L/3.0)**2) / (2*(L/12.5)**2))</string_value>
            <comment>Produce a Gaussian hump</comment>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
