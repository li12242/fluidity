from math import sin, cos, tanh, pi, sqrt

def u1(X):
    return sin(X[0]**2 + X[1]**2) + 0.500

def v1(X):
    return 0.100*cos(X[0]**2 + X[1]**2) + 0.0500

def p(X):
    return (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)

def rho1(X):
    return 0.500*sin(X[0]**2 + X[1]**2) + 0.750

def ie1(X):
    return 1.25*X[0]*X[1] + cos(X[0] + X[1]) + 20.0

def vfrac1(X):
    return -0.500*cos(3*X[0]**2*X[1]) + 1.10

def forcing_u1(X):
    return 2*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.100*cos(X[0]**2 + X[1]**2) + 0.0500)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*X[1]*cos(X[0]**2 + X[1]**2) + 2*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(sin(X[0]**2 + X[1]**2) + 0.500)*X[0]*cos(X[0]**2 + X[1]**2) - 6.30*X[0]**2*X[1]*sin(3*X[0]**2*X[1])*cos(X[0]**2 + X[1]**2) + 2.80*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*X[0]**2*sin(X[0]**2 + X[1]**2) + 2.80*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*X[1]**2*sin(X[0]**2 + X[1]**2) + (-0.500*cos(3*X[0]**2*X[1]) + 1.10)*((0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)*X[0]*cos(X[0]**2 + X[1]**2) + (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[1] - 0.400*sin(X[0] + X[1]))) - 2.80*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*cos(X[0]**2 + X[1]**2) - (-0.353553390500000*cos(3*X[0]**2*X[1]) + 0.777817459100000)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)

def forcing_v1(X):
    return -0.200*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.100*cos(X[0]**2 + X[1]**2) + 0.0500)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*X[1]*sin(X[0]**2 + X[1]**2) - 0.200*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(sin(X[0]**2 + X[1]**2) + 0.500)*X[0]*sin(X[0]**2 + X[1]**2) + 0.630*X[0]**2*X[1]*sin(X[0]**2 + X[1]**2)*sin(3*X[0]**2*X[1]) + 0.280*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*X[0]**2*cos(X[0]**2 + X[1]**2) + 0.280*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*X[1]**2*cos(X[0]**2 + X[1]**2) + (-0.500*cos(3*X[0]**2*X[1]) + 1.10)*((0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)*X[1]*cos(X[0]**2 + X[1]**2) + (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[0] - 0.400*sin(X[0] + X[1]))) + 0.280*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*sin(X[0]**2 + X[1]**2) - (-0.353553390500000*cos(3*X[0]**2*X[1]) + 0.777817459100000)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)

def forcing_rho1(X):
    return 1.50*(0.100*cos(X[0]**2 + X[1]**2) + 0.0500)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*X[0]**2*sin(3*X[0]**2*X[1]) + 3.00*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(sin(X[0]**2 + X[1]**2) + 0.500)*X[0]*X[1]*sin(3*X[0]**2*X[1]) + (-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.100*cos(X[0]**2 + X[1]**2) + 0.0500)*X[1]*cos(X[0]**2 + X[1]**2) + 2*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*X[0]*cos(X[0]**2 + X[1]**2) - 0.200*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*X[1]*sin(X[0]**2 + X[1]**2) + (-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(sin(X[0]**2 + X[1]**2) + 0.500)*X[0]*cos(X[0]**2 + X[1]**2) + (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(-3.00*(2.50*X[0] + cos(X[0]**2 + X[1]**2))*X[0]*X[1]*sin(3*X[0]**2*X[1]) - (0.500*cos(3*X[0]**2*X[1]) - 0.100)*(2.00*X[0]*sin(X[0]**2 + X[1]**2) - 2.50)) + (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(-0.750*X[0]**3*X[1]*sin(3*X[0]**2*X[1]) + 0.500*(0.500*cos(3*X[0]**2*X[1]) - 0.100)*X[0])

def forcing_ie1(X):
    return 2*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)*X[0]*cos(X[0]**2 + X[1]**2) - 0.200*(-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)*X[1]*sin(X[0]**2 + X[1]**2) + (-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.100*cos(X[0]**2 + X[1]**2) + 0.0500)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(1.25*X[0] - sin(X[0] + X[1])) + (-0.500*cos(3*X[0]**2*X[1]) + 1.10)*(0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(sin(X[0]**2 + X[1]**2) + 0.500)*(1.25*X[1] - sin(X[0] + X[1]))

def velocity1(X):
   return [u1(X), v1(X)]

def forcing_velocity1(X):
   return [forcing_u1(X), forcing_v1(X)]

def u2(X):
    return 2.50*X[0] + cos(X[0]**2 + X[1]**2)

def v2(X):
    return 0.500*X[0]*X[1]

def rho2(X):
    return 3.00

def ie2(X):
    return sin(X[0]*X[1]) + 10.0

def vfrac2(X):
    return 0.500*cos(3*X[0]**2*X[1]) - 0.100

def forcing_u2(X):
    return -(1.50*cos(3*X[0]**2*X[1]) - 0.300)*X[0]*X[1]**2*sin(X[0]**2 + X[1]**2) - 2.10*X[0]**2*X[1]*sin(X[0]**2 + X[1]**2)*sin(3*X[0]**2*X[1]) + 2.80*(0.500*cos(3*X[0]**2*X[1]) - 0.100)*X[1]**2*cos(X[0]**2 + X[1]**2) + 3.00*(-1.40*X[0]*sin(X[0]**2 + X[1]**2) + 1.75)*X[0]*X[1]*sin(3*X[0]**2*X[1]) - (1.50*cos(3*X[0]**2*X[1]) - 0.300)*(2.00*X[0]*sin(X[0]**2 + X[1]**2) - 2.50)*(2.50*X[0] + cos(X[0]**2 + X[1]**2)) - (0.500*cos(3*X[0]**2*X[1]) - 0.100)*(-2.80*X[0]**2*cos(X[0]**2 + X[1]**2) - 1.40*sin(X[0]**2 + X[1]**2)) + (0.500*cos(3*X[0]**2*X[1]) - 0.100)*((0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)*X[0]*cos(X[0]**2 + X[1]**2) + (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[1] - 0.400*sin(X[0] + X[1]))) + 1.40*(0.500*cos(3*X[0]**2*X[1]) - 0.100)*sin(X[0]**2 + X[1]**2) - 1.06066017150000*cos(3*X[0]**2*X[1]) + 0.212132034300000

def forcing_v2(X):
    return 0.250*(1.50*cos(3*X[0]**2*X[1]) - 0.300)*X[0]**2*X[1] + 0.525*X[0]**3*sin(3*X[0]**2*X[1]) + 1.05*X[0]*X[1]**2*sin(3*X[0]**2*X[1]) + 0.500*(1.50*cos(3*X[0]**2*X[1]) - 0.300)*(2.50*X[0] + cos(X[0]**2 + X[1]**2))*X[1] + (0.500*cos(3*X[0]**2*X[1]) - 0.100)*((0.500*X[0]*X[1] + 0.400*cos(X[0] + X[1]) + 8.00)*X[1]*cos(X[0]**2 + X[1]**2) + (0.500*sin(X[0]**2 + X[1]**2) + 0.750)*(0.500*X[0] - 0.400*sin(X[0] + X[1]))) - 1.06066017150000*cos(3*X[0]**2*X[1]) + 0.212132034300000

def forcing_ie2(X):
    return 0.500*(1.50*cos(3*X[0]**2*X[1]) - 0.300)*X[0]**2*X[1]*cos(X[0]*X[1]) + (1.50*cos(3*X[0]**2*X[1]) - 0.300)*(2.50*X[0] + cos(X[0]**2 + X[1]**2))*X[1]*cos(X[0]*X[1])

def velocity2(X):
   return [u2(X), v2(X)]

def forcing_velocity2(X):
   return [forcing_u2(X), forcing_v2(X)]

