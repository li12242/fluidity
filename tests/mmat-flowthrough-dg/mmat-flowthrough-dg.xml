<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">

<testproblem>
  <name>Control volume, multi-material flow test</name>
  <owner userid="cwilson"/>
  <tags>flml solidity</tags>
    <problem_definition length="special" nprocs="1">
    <command_line>dfluidity -v3 -l -x 2material_flowthrough.flml </command_line>
  </problem_definition>  
  <variables>  
     <variable name="mxvfrac" language="python"> 
import fluidity_tools
mxvfrac = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['MaterialVolumeFraction']['max'][-1]
    </variable>    
     <variable name="mnvfrac" language="python"> 
import fluidity_tools
mnvfrac = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['MaterialVolumeFraction']['min'][-1]
    </variable>    
     <variable name="mxvfrac2" language="python"> 
import fluidity_tools
mxvfrac2 = fluidity_tools.stat_parser("2material_flowthrough.stat")['Air']['MaterialVolumeFraction']['max'][-1]
    </variable>    
     <variable name="mnvfrac2" language="python"> 
import fluidity_tools
mnvfrac2 = fluidity_tools.stat_parser("2material_flowthrough.stat")['Air']['MaterialVolumeFraction']['min'][-1]
    </variable>    
     <variable name="prevmxvfrac" language="python"> 
import fluidity_tools
prevmxvfrac = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['MaterialVolumeFraction']['max'][-2]
    </variable>    
     <variable name="prevmnvfrac" language="python"> 
import fluidity_tools
prevmnvfrac = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['MaterialVolumeFraction']['min'][-2]
    </variable>    
     <variable name="prevmnvfrac2" language="python"> 
import fluidity_tools
prevmnvfrac2 = fluidity_tools.stat_parser("2material_flowthrough.stat")['Air']['MaterialVolumeFraction']['min'][-2]
    </variable>    
     <variable name="oldmxvfrac" language="python"> 
import fluidity_tools
oldmxvfrac = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['OldMaterialVolumeFraction']['max'][-1]
    </variable>    
     <variable name="oldmnvfrac" language="python"> 
import fluidity_tools
oldmnvfrac = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['OldMaterialVolumeFraction']['min'][-1]
    </variable>    
    <variable name="mxpressure" language="python">
import fluidity_tools
mxpressure = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['Pressure']['max'][-1]
    </variable>
    <variable name="mxpressure2" language="python">
import fluidity_tools
mxpressure2 = fluidity_tools.stat_parser("2material_flowthrough.stat")['Air']['Pressure']['max'][-1]
    </variable>
    <variable name="mxvelocity" language="python">
import fluidity_tools
mxvelocity = fluidity_tools.stat_parser("2material_flowthrough.stat")['Water']['Velocity%magnitude']['max'][-1]
    </variable>    
    <variable name="mxvelocity2" language="python">
import fluidity_tools
mxvelocity2 = fluidity_tools.stat_parser("2material_flowthrough.stat")['Air']['Velocity%magnitude']['max'][-1]
    </variable>    
  </variables>
    <pass_tests>  
    <test name="check maximum volume fraction is less than 0.05" language="python">
   assert mxvfrac &lt; 5e-2
    </test>    
    <test name="check minimum diagnostic volume fraction is greater than 1-0.05" language="python">
   assert mnvfrac2 &gt; 1.0-5e-2
    </test>    
    <test name="check maximum pressure is 0.0" language="python">
	assert abs(mxpressure) &lt; 1e-6
    </test>   
    <test name="check maximum speed is 0.5" language="python">
	assert abs(mxvelocity-0.5) &lt; 1e-6
    </test>    
    <test name="check prognostic and aliased max pressure are the same" language="python">
   assert mxpressure==mxpressure2
    </test>    
    <test name="check prognostic and aliased max speeds are the same" language="python">
   assert mxvelocity==mxvelocity2
    </test>    
    <test name="check diagnostic volume fraction max" language="python">
   assert abs(mxvfrac-(1.0-mnvfrac2)) &lt; 1e-6
    </test>
    <test name="check diagnostic volume fraction min" language="python">
   assert abs(mnvfrac-(1.0-mxvfrac2)) &lt; 1e-6
    </test>
    <test name="check previous and old max prognostic volume fractions are the same" language="python">
   assert oldmxvfrac==prevmxvfrac
    </test>    
    <test name="check previous and old min prognostic volume fractions are the same" language="python">
   assert oldmnvfrac==prevmnvfrac
    </test>   
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
