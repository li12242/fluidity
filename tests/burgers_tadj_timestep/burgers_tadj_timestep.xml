<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>Burgers Equation MMS</name>
  <owner userid="pef"/>
  <tags>burgers</tags>
  <problem_definition length="special" nprocs="1">
    <command_line>burgers_equation mms_A.bml; burgers_equation mms_B.bml; burgers_equation mms_C.bml; burgers_equation mms_D.bml; burgers_equation mms_E.bml</command_line>
  </problem_definition>
  <variables>
    <variable name="gradient" language="python">
gradient = -533.3333333333 # from sage
    </variable>
    <variable name="gradient_a" language="python">
from fluidity_tools import stat_parser as stat
gradient_a = sum(stat("mms_adjoint_A_adjoint.stat")["Fluid"]["dJdm"]["max"])
    </variable>
    <variable name="gradient_b" language="python">
from fluidity_tools import stat_parser as stat
gradient_b = sum(stat("mms_adjoint_B_adjoint.stat")["Fluid"]["dJdm"]["max"])
    </variable>
    <variable name="gradient_c" language="python">
from fluidity_tools import stat_parser as stat
gradient_c = sum(stat("mms_adjoint_C_adjoint.stat")["Fluid"]["dJdm"]["max"])
    </variable>
    <variable name="gradient_d" language="python">
from fluidity_tools import stat_parser as stat
gradient_d = sum(stat("mms_adjoint_D_adjoint.stat")["Fluid"]["dJdm"]["max"])
    </variable>
    <variable name="gradient_e" language="python">
from fluidity_tools import stat_parser as stat
gradient_e = sum(stat("mms_adjoint_E_adjoint.stat")["Fluid"]["dJdm"]["max"])
    </variable>
    <variable name="conv_ab" language="python">
from fluidity_tools import stat_parser as stat
from math import log
gradient = -533.3333333333 # from sage
err_a = abs(gradient - sum(stat("mms_adjoint_A_adjoint.stat")["Fluid"]["dJdm"]["max"]))
err_b = abs(gradient - sum(stat("mms_adjoint_B_adjoint.stat")["Fluid"]["dJdm"]["max"]))
conv_ab = log(err_a/err_b, 2)
    </variable>
    <variable name="conv_bc" language="python">
from fluidity_tools import stat_parser as stat
from math import log
gradient = -533.3333333333 # from sage
err_b = abs(gradient - sum(stat("mms_adjoint_B_adjoint.stat")["Fluid"]["dJdm"]["max"]))
err_c = abs(gradient - sum(stat("mms_adjoint_C_adjoint.stat")["Fluid"]["dJdm"]["max"]))
conv_bc = log(err_b/err_c, 2)
    </variable>
    <variable name="conv_cd" language="python">
from fluidity_tools import stat_parser as stat
from math import log
gradient = -533.3333333333 # from sage
err_c = abs(gradient - sum(stat("mms_adjoint_C_adjoint.stat")["Fluid"]["dJdm"]["max"]))
err_d = abs(gradient - sum(stat("mms_adjoint_D_adjoint.stat")["Fluid"]["dJdm"]["max"]))
conv_cd = log(err_c/err_d, 2)
    </variable>
    <variable name="conv_de" language="python">
from fluidity_tools import stat_parser as stat
from math import log
gradient = -533.3333333333 # from sage
err_d = abs(gradient - sum(stat("mms_adjoint_D_adjoint.stat")["Fluid"]["dJdm"]["max"]))
err_e = abs(gradient - sum(stat("mms_adjoint_E_adjoint.stat")["Fluid"]["dJdm"]["max"]))
conv_de = log(err_d/err_e, 2)
    </variable>
  </variables>
  <pass_tests>
    <test name="conv_ab > 1.9" language="python">
assert conv_ab &gt; 1.9
    </test>
    <test name="conv_bc > 1.9" language="python">
assert conv_bc &gt; 1.9
    </test>
    <test name="conv_cd > 1.9" language="python">
assert conv_cd &gt; 1.9
    </test>
    <test name="conv_de > 1.9" language="python">
assert conv_de &gt; 1.9
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>

