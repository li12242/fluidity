<?xml version='1.0' encoding='utf-8'?>
<burgers_equation>
  <simulation_name>
    <string_value lines="1">mms_adjoint_D</string_value>
  </simulation_name>
  <geometry>
    <dimension>
      <integer_value rank="0">1</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="mms_D">
        <format name="triangle"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">4</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>vtk</dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">1</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="VelocityMesh"/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">2.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">1</integer_value>
    </nonlinear_iterations>
  </timestepping>
  <material_phase name="Fluid">
    <scalar_field name="Velocity" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-16</real_value>
          </relative_error>
          <absolute_error>
            <real_value rank="0">1.0e-12</real_value>
          </absolute_error>
          <max_iterations>
            <integer_value rank="0">30000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  m = 0.005
  x = X[0]
  return m * (x + 10) * (x - 10)</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="zero">
          <surface_ids>
            <integer_value shape="2" rank="1">1 2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <viscosity>
          <real_value rank="0">1.0</real_value>
        </viscosity>
        <stat/>
        <adjoint_storage>
          <exists_in_both>
            <record/>
          </exists_in_both>
        </adjoint_storage>
        <scalar_field name="Source" rank="0">
          <prescribed>
            <value name="WholeMesh">
              <python>
                <string_value lines="20" type="python">def val(X, t):
  m = 0.005
  x = X[0]
  return 2*m**2*x**3 -200*m**2*x -2.0*m</string_value>
              </python>
            </value>
          </prescribed>
        </scalar_field>
      </prognostic>
    </scalar_field>
    <scalar_field name="AnalyticalSolution" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  m = 0.005
  x = X[0]
  return m * (x + 10) * (x - 10)</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="Error" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">soln = state.scalar_fields["Velocity"]
exact = state.scalar_fields["AnalyticalSolution"]
# The problem is only specified up to a constant, so add on the constant
constant = exact.node_val(0) - soln.node_val(0)

for i in range(field.node_count):
  field.set(i, soln.node_val(i) + constant - exact.node_val(i))</string_value>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_forward/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="TargetVelocity" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  m = 0.01 # the target m is 0.01
  x = X[0]
  return m * (x + 10) * (x - 10)</string_value>
          </python>
        </value>
        <do_not_recalculate/>
        <adjoint_storage>
          <exists_in_forward>
            <record/>
          </exists_in_forward>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="dFdm" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python"># This is the dependence of the system of equations on
# the parameter m. Before using this, it has to be multiplied
# by the mass matrix, as that's what actually happens to it
# in the source term on the right-hand side. See the computation
# of MdFdm.

def val(X, t):
  m = 0.005
  x = X[0]
  return -4*m*x**3 + 400*m*x + 2.0</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
    <scalar_field name="dJdm" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python">import numpy

dFdm = state.scalar_fields["MdFdm"]
adjoint = state.scalar_fields["AdjointVelocity"]

result = -numpy.dot(dFdm.val, adjoint.val)

# result is a scalar, but we currently can't do dynamic
# scalar diagnostics. Sooo .. put it in every location
# in the array.

field.val[:] = result</string_value>
          <depends>
            <string_value lines="1">MdFdm</string_value>
          </depends>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="MdFdm" rank="0">
      <diagnostic>
        <mesh name="VelocityMesh"/>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="python"># dFdm needs to be multiplied by the mass matrix, see?
# so here we multiply it by the mass matrix, to give
# MdFdm

import numpy

dFdm = state.scalar_fields["dFdm"]
coord = state.vector_fields["Coordinate"]

field.val[:] = 0.0

# This is supposed to be the partial derivative of the equations
# wrt m. For timestep 0, the rhs is the initial condition,
# and so the derivative is the derivative of the initial condition
# wrt m. Which we conveniently have already in dudm ..
if time == 0.0:
  dudm = state.scalar_fields["dudm"]
  field.val[:] = -1 * dudm.val
  
else:
  for ele in range(field.element_count):
    t = Transform(ele, coord)
    shape = dFdm.ele_shape(ele)
    m = t.shape_shape(shape, shape)
    field.addto(field.ele_nodes(ele), numpy.dot(m, dFdm.ele_val(ele)))
  
  # and we zero the first and last, because that is where the Dirichlet BCs are imposed
  field[0] = 0.0; field[-1] = 0.0</string_value>
        </algorithm>
        <stat/>
        <adjoint_storage>
          <exists_in_adjoint/>
        </adjoint_storage>
      </diagnostic>
    </scalar_field>
    <scalar_field name="dudm" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="python">def val(X, t):
  x = X[0]
  return (x + 10) * (x - 10)</string_value>
          </python>
        </value>
        <adjoint_storage>
          <exists_in_both>
            <record/>
          </exists_in_both>
        </adjoint_storage>
      </prescribed>
    </scalar_field>
  </material_phase>
  <adjoint>
    <functional>
      <algorithm name="functional">
        <string_value lines="20" type="python">J = 0.0
if time == 2.0:
  import numpy
  coord  = states[n]["Fluid"].vector_fields["Coordinate"]
  u      = states[n]["Fluid"].scalar_fields["Velocity"]
  target = states[n]["Fluid"].scalar_fields["TargetVelocity"]
  
  for ele in range(u.element_count):
    t = Transform(ele, coord)
    shape = u.ele_shape(ele)
    m = t.shape_shape(shape, shape)
    v = u.ele_val(ele) - target.ele_val(ele)
    J += numpy.sum(numpy.outer(v, v) * m)
    
  J = 0.5 * J</string_value>
      </algorithm>
    </functional>
    <functional_derivative>
      <algorithm name="functional_derivative">
        <string_value lines="20" type="python">import numpy

coord = states[n]["Fluid"].vector_fields["Coordinate"]
u = states[n]["Fluid"].scalar_fields["Velocity"]
target = states[n]["Fluid"].scalar_fields["TargetVelocity"]
du = derivatives["FluidDerivatives"].scalar_fields["VelocityDerivative"]
dudm = states[n]["Fluid"].scalar_fields["dudm"]

du.val[:] = 0.0
if time == 2.0:
  for ele in range(u.element_count):
    shape = u.ele_shape(ele)
    integrand = (u.ele_val_at_quad(ele) - target.ele_val_at_quad(ele)) * shape.n
    t = Transform(ele, coord)
    du.addto(du.ele_nodes(ele), numpy.dot(integrand, t.detwei))</string_value>
      </algorithm>
    </functional_derivative>
  </adjoint>
</burgers_equation>
