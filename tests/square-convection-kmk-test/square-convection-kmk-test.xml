<?xml version = "1.0" encoding = "UTF-8" ?>
<!DOCTYPE testproblem SYSTEM "regressiontest.dtd">
<testproblem>
  <name>Square convection (Ra=10^4 static CG-test version)</name>
  <owner userid="maddison"/>
  <tags>flml</tags>
  <problem_definition length = "medium" nprocs = "1">
    <command_line>make clean-run-debug &amp;&amp; fluidity -v2 -l square-convection.flml</command_line>
  </problem_definition>
  <variables>
    <variable name = "times" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
times = s["ElapsedTime"]["value"]
    </variable>
    <variable name = "max_cfl_numbers" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
max_cfl_numbers = s["Fluid"]["CFLNumber"]["max"]
    </variable>
    <variable name = "solvers_converged" language = "python">
import os
files = os.listdir("./")
solvers_converged = not "matrixdump" in files and not "matrixdump.info" in files 
    </variable>
    <variable name = "mid_point_u_maxes" language = "python">
import os
import vtk
files = os.listdir("./")
vtuFiles = []
for file in files:
  if file.endswith(".vtu") and "square-convection" in file and not "checkpoint" in file:
    vtuFiles.append(file)
vtuFiles.sort()
mid_point_u_maxes = []
for i in range(len(vtuFiles)):
  vtuFile = "square-convection_" + str(i) + ".vtu"
  # Reading as in vtktools vtu constructor
  reader = vtk.vtkXMLUnstructuredGridReader()
  reader.SetFileName(vtuFile)
  reader.Update()
  vtu = reader.GetOutput()
  # Cutting references:
  #   ClipCow.py vtkCutter example of vtk documentation 5.0.4
  #   lock_exchange_tet.xml results variable
  # An implicit function with which to cut
  plane = vtk.vtkPlane()
  plane.SetOrigin(0.5, 0.0, 0.0)
  plane.SetNormal(1.0, 0.0, 0.0)
  # The cutter
  cutter = vtk.vtkCutter()
  cutter.SetCutFunction(plane)
  cutter.SetInput(vtu)
  # Cut
  cutter.Update()
  cutVtu = cutter.GetOutput()
  # Extraction of field data as in vtktools
  data = cutVtu.GetPointData().GetScalars("Velocity")
  u = [data.GetTuple3(i)[0] for i in range(data.GetNumberOfTuples())]
  mid_point_u_maxes.append(max(u))
    </variable>
    <variable name = "mid_point_w_maxes" language = "python">
import os
import vtk
files = os.listdir("./")
vtuFiles = []
for file in files:
  if file.endswith(".vtu") and "square-convection" in file and not "checkpoint" in file:
    vtuFiles.append(file)
vtuFiles.sort()
mid_point_w_maxes = []
for i in range(len(vtuFiles)):
  vtuFile = "square-convection_" + str(i) + ".vtu"
  # Reading as in vtktools vtu constructor
  reader = vtk.vtkXMLUnstructuredGridReader()
  reader.SetFileName(vtuFile)
  reader.Update()
  vtu = reader.GetOutput()
  # Cutting references:
  #   ClipCow.py vtkCutter example of vtk documentation 5.0.4
  #   lock_exchange_tet.xml results variable
  # An implicit function with which to cut
  plane = vtk.vtkPlane()
  plane.SetOrigin(0.0, 0.5, 0.0)
  plane.SetNormal(0.0, 1.0, 0.0)
  # The cutter
  cutter = vtk.vtkCutter()
  cutter.SetCutFunction(plane)
  cutter.SetInput(vtu)
  # Cut
  cutter.Update()
  cutVtu = cutter.GetOutput()
  # Extraction of field data as in vtktools
  data = cutVtu.GetPointData().GetScalars("Velocity")
  w = [data.GetTuple3(i)[1] for i in range(data.GetNumberOfTuples())]
  mid_point_w_maxes.append(max(w))
    </variable>
    <variable name = "left_boundary_average_nus" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.stat")
left_boundary_average_nus = s["Fluid"]["Temperature"]["surface_integral%LeftH"]
    </variable>
    <variable name = "psi_mids" language = "python">
import fluidity_tools
s = fluidity_tools.stat_parser("square-convection.detectors")
psi_mids = s["Fluid"]["StreamFunction"]["MidPoint"]
    </variable>
  </variables>
<!--Testing against benchmark values from:
  G. de Vahl Davis and I. P. Jones, Natural Convection In A Square Cavity: A Comparison Exercise, Int. J. for Num. Meth. in Fluids, vol. 3, 227-248 (1983)-->
  <pass_tests>
    <test name = "Simulation completed" language = "python">
assert(times[-1] &gt;= 2.0)
    </test>
    <test name = "Solvers converged" language = "python">
assert(solvers_converged)
    </test>
    <test name = "CFL number" language = "python">
print max(max_cfl_numbers)
assert(max(max_cfl_numbers) &lt;= 1.0 * 2.0)
    </test>
    <test name = "Mid-point umax converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(mid_point_u_maxes, 1.0e-3, test_count = 5)
    </test>
    <test name = "umax benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(mid_point_u_maxes[len(mid_point_u_maxes) - 1], 16.178, 0.05)
    </test>
    <test name = "Mid-point vmax converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(mid_point_w_maxes, 1.0e-3, test_count = 5)
    </test>
    <test name = "wmax benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(mid_point_w_maxes[len(mid_point_w_maxes) - 1], 19.617, 0.05)
    </test>
    <test name = "Left boundary average Nu converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(left_boundary_average_nus, 1.0e-3, test_count = 5)
    </test>
    <test name = "Average Nu benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(left_boundary_average_nus[len(left_boundary_average_nus) - 1], 2.243, 0.1)
    </test>
    <test name = "Mid-point streamfunction converged" language = "python">
import fluidity_tools
fluidity_tools.test_steady(psi_mids, 1.0e-3, test_count = 5)
    </test>
    <test name = "Mid-point streamfunction benchmark" language = "python">
import fluidity_tools
fluidity_tools.compare_variable(abs(psi_mids[-1]), 5.071, 0.1)
    </test>
  </pass_tests>
  <warn_tests>
  </warn_tests>
</testproblem>
