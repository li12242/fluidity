include "spud_base.rnc"

start =
   (
      ## The root node of the options dictionary.
      element optimiser_options {
         comment,
         ## Output files are named according to the optimisation
         ## name, e.g. [optimisation_name]_0.stat. Non-standard
         ## characters in the optimisation name should be avoided.
         element name {
            anystring
         },
         model,
         optimisation_options,
         control_io, 
         debugging_options
      }
   )

model = 
   (
      ## Options to specifing the *flml file containing to model
      ## configuration template
      element model {
         attribute option_file { xsd:string },
         attribute command_line { xsd:string }
      },
      ## Options to specifing the *flml file containing to model
      ## configuration template
      element functional {
         attribute name { xsd:string }
      }
   )

optimisation_options =
   (
      ## Options for the optimisation algorithm.
      element optimisation_options {
         (
            ## Minimize the functional using the BFGS algorithm.
            element optimisation_algorithm {
              attribute name { "BFGS" },
              comment
            }|
            ## Minimize the functional using the NCG algorithm.
            element optimisation_algorithm {
              attribute name { "NCG" },
              comment
            }|
            ## Minimize the functional using the LBFGS algorithm. 
            element optimisation_algorithm {
              attribute name { "LBFGS" },
              comment
            }|
            ## Minimize the functional using modified Powellâ€™s method.
            element optimisation_algorithm {
               attribute name { "Powell" },
               comment
            }
         ),
         ## The optimisation loop tolerance
         element tolerance {
              real
         },
         comment
      }
   )

control_io =
   (
      ## Read mesh from file.
      element control_io {
            element control {
                attribute name { xsd:string },
                  (
                    element type {
                      ## The custom control parameter is the most flexible one since it allows 
                      ## to code custom python functions for handling the controls.
                      attribute name { "custom" },
                      ## Python function which expects a numpy.array as return value of the control parameter dimension.
                      element get_initial_controls {
                         python_code
                      },
                      ## Python function which takes as input a numpy array containing the new model parameters and
                      ## updates the corresponding model configuration.
                      element update_controls {
                         python_code
                      },
                      comment
                    }|
                    ## Initial condition 
                    element type {
                      attribute name { "initial_condition" },
                      comment
                    }|
                    ## Boundary condition 
                    element type {
                       attribute name { "boundary_condition" },
                       comment
                    }
                )
           }+
       }
   )

debugging_options = 
  (
      ## Debugging options.
      element debugging {
         (
            ## Check the functional gradient with respect to the parameters using finite differences. 
            ## The l2 error of the result is saved in the stat file as [functional name]_gradient_error
            element check_gradient {
              empty
            }?
         ),
         comment
      }?
  )
