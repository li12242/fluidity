mesh_info =
   (
      ## Read mesh from file.
      element from_file {
         (
            ## Triangle mesh format.
            ##
            ## Enter the base name without the .edge .ele, .face or
            ## .node extensions, and without process numbers.
            element format {
              attribute name { "triangle" },
              comment
            }|
            ## Read the mesh from a vtu. Note that the mesh will have no surface
            ## or region IDs.
            element format {
              attribute name { "vtu" },
              comment
            }|
            ## CGNS mesh format (not yet implemented)
            element format {
               attribute name { "cgns" },
               comment
            }
         ),
         attribute file_name { xsd:string },
         from_file_mesh_stat_options,
         comment
      }|
      ## Make mesh from existing mesh. 
      element from_mesh {
         mesh_choice,
         element mesh_shape {
            element polynomial_degree {
               integer
            }
         }?,
         element mesh_continuity {
            element string_value{
               "continuous" | "discontinuous"
            }
         }?,
         ## Make mesh periodic
         element periodic_boundary_conditions {
            attribute name { xsd:string },
            ## List of boundary ids that are aliased to
            element physical_boundary_ids {
               integer_vector
            },
            ## List of boundary ids that are aliased
            element  aliased_boundary_ids {
               integer_vector
            },
            ## Python code which takes coordinate of an aliased
            ## boundary node and returns the coordinate of a physical
            ## boundary node.
            ## Note that in adaptive simulations this will be applied to
            ## arbitrary points in space, not just those on the original aliased
            ## boundary.
            element coordinate_map {
               python_code
            },
            ## Python code which takes coordinate of a physical
            ## boundary node and returns the coordinate of an aliased
            ## boundary node. This is used in adaptive simulations to
            ## keep the adapted domain inside the bounding box of the
            ## original domain.
            element inverse_coordinate_map {
               python_code
            }?,
            ## <b>Don't turn this on by hand!</b>
            ## This option gets set by the periodise tool, to indicate
            ## that this mesh should have the periodic boundary conditions
            ## <b>removed</b>. See the discussion on the wiki about 
            ## parallel periodic boundary conditions.
            element remove_periodicity {
               empty
            }?
         }*,
         ## Extrude a horizontal (1D or 2D) mesh in the vertical
         element extrude {
            ## Depth over which to extrude
            ## top will be at z=0
            ## bottom will be at z=-bottom_depth
            element bottom_depth {
               input_choice_real
            },
            ## Constant or function to specify the depth of the
            ## layers. The function is a function of all coordinates
            ## (so in 2+1D: x,y and z) to specify a layer depth that
            ## varies both in the horizontal as in the vertical.
            element sizing_function {
               input_choice_real
            },
            ## surface_id to assign to the top of the extruded mesh
            element top_surface_id {
               integer
            }?,
            ## surface_id to assign to the bottom of the extruded mesh
            element bottom_surface_id {
               integer
            }?,
            ## This is an internal option used by checkpointing. The 
            ## option is switched on automatically in writing a 
            ## checkpoint, so that when starting from the checkpoint .flml
            ## fluidity picks up the extruded mesh from file. After the next
            ## adapt the extrusion is again done as specified in the other
            ## extrusion options and under the adaptivity options.
            element checkpoint_from_file {
               element format {
                  ## Triangle mesh format.
                  ##
                  ## Enter the base name without the .edge .ele, .face or
                  ## .node extensions, and without process numbers.
                  attribute name { "triangle" }
               },
               attribute file_name { xsd:string },
               comment
            }?
         }?,
         derived_mesh_stat_options,
         comment
      }
   )

# Options for inclusion/exclusion of mesh statistics from the .stat file
include_mesh_in_stat =
   (
      ## Include this mesh in the .stat file
      element include_in_stat {
         comment
      }
   )
exclude_mesh_from_stat =
   (
      ## Exclude this mesh from the .stat file
      element exclude_from_stat {
         comment
      }
   )

# Diagnostic statistics options for meshed, with enabled by default
mesh_stat_options_enabled_default =
   (
      include_mesh_in_stat|
      exclude_mesh_from_stat
   )

# Diagnostic statistics options for meshed, with disabled by default
mesh_stat_options_disabled_default = 
   (
      exclude_mesh_from_stat|
      include_mesh_in_stat
   )

from_file_mesh_stat_options =
   (
      ## Specify what is added to .stat files
      element stat {
         mesh_stat_options_enabled_default
      }
   )
derived_mesh_stat_options =
   (
      ## Specify what is added to .stat files
      element stat {
         mesh_stat_options_disabled_default
      }
   )
