#!/usr/bin/env python

# A draft python binding for libspud
# You will need to compile _libspud.so
# by hand for now -- haven't hooked it up
# to the Makefile

from ctypes import *
import os

SPUD_REAL      = 0
SPUD_INTEGER   = 1
SPUD_NONE      = 2
SPUD_CHARACTER = 3
pytype_map = {SPUD_REAL: float, SPUD_INTEGER: int, SPUD_NONE: None, SPUD_CHARACTER: str}
typepy_map = {float: SPUD_REAL, int: SPUD_INTEGER, None: SPUD_NONE, str: SPUD_CHARACTER}
ctype_map  = {float: c_double, int: c_int, None: None, str: c_char_p}

SPUD_NO_ERROR                = 0
SPUD_KEY_ERROR               = 1
SPUD_TYPE_ERROR              = 2
SPUD_RANK_ERROR              = 3
SPUD_SHAPE_ERROR             = 4
SPUD_NEW_KEY_WARNING         = -1
SPUD_ATTR_SET_FAILED_WARNING = -2

OPTION_PATH_LEN = 8192

class SpudKeyError(Exception):
  pass

class SpudTypeError(Exception):
  pass

class SpudRankError(Exception):
  pass

class SpudShapeError(Exception):
  pass

class SpudNewKeyWarning(Exception):
  pass
  
class SpudAttrSetFailedWarning(Exception):
  pass
  
spud_exceptions = {SPUD_KEY_ERROR: SpudKeyError,
                   SPUD_TYPE_ERROR: SpudTypeError,
                   SPUD_RANK_ERROR: SpudRankError,
                   SPUD_SHAPE_ERROR: SpudShapeError,
                   SPUD_NEW_KEY_WARNING: SpudNewKeyWarning,
                   SPUD_ATTR_SET_FAILED_WARNING: SpudAttrSetFailedWarning}

libspud = cdll.LoadLibrary('@prefix@'  + '/lib/libspud.so')

cclear_options = libspud.cspud_clear_options_
cclear_options.argtypes = []
cclear_options.restype = None

def clear_options():
  cclear_options()

cload_options = libspud.cspud_load_options_
cload_options.argtypes = [c_char_p, POINTER(c_int)]
cload_options.restype = None

def load_options(s):
  cload_options(s, byref(c_int(len(s))))

cwrite_options = libspud.cspud_write_options_
cwrite_options.argtypes = [c_char_p, POINTER(c_int)]
cwrite_options.restype = None

def write_options(filename):
  cwrite_options(filename, byref(c_int(len(filename))))

cget_child_name = libspud.cspud_get_child_name_
cget_child_name.argtypes = [c_char_p, POINTER(c_int), POINTER(c_int), c_char_p, POINTER(c_int)]
cget_child_name.restype = c_int

def get_child_name(s, idx):
  val = create_string_buffer(OPTION_PATH_LEN)
  out = cget_child_name(s, byref(c_int(len(s))), byref(c_int(idx)), val, byref(c_int(len(val))))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
    
  return val.value.strip()
  
cnumber_of_children = libspud.cspud_number_of_children_
cnumber_of_children.argtypes = [c_char_p, POINTER(c_int)]
cnumber_of_children.restype = c_int

def number_of_children(s):
  return cnumber_of_children(s, byref(c_int(len(s))))
    
coption_count = libspud.cspud_option_count_
coption_count.argtypes = [c_char_p, POINTER(c_int)]
coption_count.restype = c_int

def option_count(s):
  return coption_count(s, byref(c_int(len(s))))
   
chave_option = libspud.cspud_have_option_
chave_option.argtypes = [c_char_p, POINTER(c_int)]
chave_option.restype = c_int

def have_option(s):
  out = chave_option(s, byref(c_int(len(s))))
  
  if out == 1:
    return True
  else:
    return False

cget_option_type = libspud.cspud_get_option_type_
cget_option_type.argtypes = [c_char_p, POINTER(c_int), POINTER(c_int)]
cget_option_type.restype = c_int

def get_option_type(s):
  val = c_int()
  out = cget_option_type(s, byref(c_int(len(s))), byref(val))

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return pytype_map[val.value]
  
cget_option_rank = libspud.cspud_get_option_rank_
cget_option_rank.argtypes = [c_char_p, POINTER(c_int), POINTER(c_int)]
cget_option_rank.restype = c_int

def get_option_rank(s):
  rank = c_int()
  out = cget_option_rank(s, byref(c_int(len(s))), byref(rank))
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
  return rank.value
  
cget_option_shape = libspud.cspud_get_option_shape_
cget_option_shape.argtypes = [c_char_p, POINTER(c_int), POINTER(c_int)]
cget_option_shape.restype = int

def get_option_shape(s):
  shape_type = c_int * 2
  shape = shape_type()
  out = cget_option_shape(s, byref(c_int(len(s))), shape)

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return tuple(shape)

cget_option = libspud.cspud_get_option_
cget_option.argtypes = [c_char_p, POINTER(c_int), c_void_p]
cget_option.restype = c_int

def get_option(s):
  type = get_option_type(s)
  # assume scalar values for now ..
  if type is str:
    strlen = get_option_shape(s)[0]
    val = create_string_buffer(strlen+1)
  else:
    val = ctype_map[type]()

  out = cget_option(s, byref(c_int(len(s))), byref(val))
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return val.value

cadd_option = libspud.cspud_add_option_
cadd_option.argtypes = [c_char_p, POINTER(c_int)]
cadd_option.restype = c_int

def add_option(s):
  out = cadd_option(s, byref(c_int(len(s))))

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return

cset_option = libspud.cspud_set_option_
cset_option.argtypes = [c_char_p, POINTER(c_int), c_void_p, POINTER(c_int), POINTER(c_int), POINTER(c_int)]
cset_option.restype = c_int

def set_option(s, val):
  py_type = type(val)
  spud_code = typepy_map[py_type]
  c_type = ctype_map[py_type]
  c_val = c_type(val)

  shape_type = c_int * 2
  if py_type is str:
    shape = shape_type(len(val), -1)
    rank = 1
    out = cset_option(s, byref(c_int(len(s))), (c_val), byref(c_int(spud_code)), byref(c_int(rank)), shape)
  else:
    shape = shape_type(1, -1)
    rank = 0
    out = cset_option(s, byref(c_int(len(s))), byref(c_val), byref(c_int(spud_code)), byref(c_int(rank)), shape)

  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]
    
cset_option_attribute = libspud.cspud_set_option_attribute_
cset_option_attribute.argtypes = [c_char_p, POINTER(c_int), c_char_p, POINTER(c_int)]
cset_option_attribute.restype = c_int

def set_option_attribute(s, val):
  out = cset_option_attribute(s, byref(c_int(len(s))), val, byref(c_int(len(val))))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return
  
cdelete_option = libspud.cspud_delete_option_
cdelete_option.argtypes = [c_char_p, POINTER(c_int)]
cdelete_option.restype = c_int

def delete_option(s):
  out = cdelete_option(s, byref(c_int(len(s))))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return

cmove_option = libspud.cspud_move_option_
cmove_option.argtypes = [c_char_p, POINTER(c_int), c_char_p, POINTER(c_int)]
cmove_option.restype = c_int

def move_option(s1, s2):
  out = cmove_option(s1, byref(c_int(len(s1))), s2, byref(c_int(len(s2))))
  
  if out != SPUD_NO_ERROR:
    raise spud_exceptions[out]

  return

cprint_options = libspud.cspud_print_options_
cprint_options.restype = None
cprint_options.argtypes = []

def print_options():
  cprint_options()
