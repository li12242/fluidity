###
###              BL test COMPRESSIBLE
### First part - before first *** exit *** statement
### is for scalar variables that will set up the right 
### size of the arrays
###
# Problem type: options -2, -1, 0, and 1
problem               1
# Number of phases
nphase                2
# total number of elements
totele               10
# Dimensionality
ndim                  1
# nlev --> controls u_snloc
nlev                  3
# Number of velocity nodes
u_nloc                6
# Number of spatial nodes associated w velocity 
xu_nloc               2
# number of nodes associated with CV
cv_nloc               3
# Number of spatial nodes
x_nloc                3
# Number of pressure nodes
p_nloc                3
# Number of surface nodes associated with CV
cv_snloc              1
# Number of surface nodes associated w velocity
u_snloc              -1
# Number of surface pressure nodes
p_snloc               1
# Number of surface spatial nodes
x_snloc               1
# Total number of surface elements
stotel                2
# Number of coeffs for polynomial representation for EOS
ncoef                10
# Number of coeffs for polynomial representation of permeability/absorption
nuabs_coefs           1
# Option for element type: Velocity mesh
u_ele_type 	      2
# Option for element type: Pressure mesh
p_ele_type            2
# Option for element type: Material mesh
mat_ele_type          1
# Option for element type: CV mesh
cv_ele_type           2
# Option for element type: CV surface mesh
cv_sele_type          1
# Option for element type: Velocity surface mesh
u_sele_type           1
# Total number of time dumps
ntime                 1
# Total number of non-linear iterations
nits                  3 
# Option for modified CMC color algorithm(/=0), if <0==>ndpset=cv_nonods 
ndpset                0
# Time-step size
dt                    1.0e0
# Reference pressure (not in use)
patmos                0.
# Initial pressure (not in use)
p_ini                 0.
# Initial temperature (or any scalar field, not in use)
t_ini                 0.
# Conservative(1.)/non-conservative(0.) flag for CV discretisation
t_beta                0.
# Conservative(1.)/non-conservative(0.) flag for Volfra discretisation
v_beta                1.
# Time-stepping discretisation parameter
t_theta               0.
# Time-stepping discretisation parameter
v_theta               1.
# Time-stepping discretisation parameter (not in use)
u_theta               1.
# Disopt: discretisation option in space and time (see cv-adv-dif.f90)
# = 8: Finite elements in space (Theta = specified;  Limiting: Downwind+)
t_disopt              1
# Disopt: discretisation option in space and time (see cv-adv-dif.f90)
# = 0: 1st order in space (Theta=specified;  Limiting: universal)
u_disopt              1
# Disopt: discretisation option in space and time (see cv-adv-dif.f90)
# = 0: 1st order in space (Theta=specified;  Limiting: universal)
v_disopt              8
#  t_dg_vel_int_opt: interface scalar field calculation option between elements
t_dg_vel_int_opt      0
#  u_dg_vel_int_opt: interface velocity calculation option between elements
u_dg_vel_int_opt      4
#  v_dg_vel_int_opt: interface velocitycalculation option between elements
v_dg_vel_int_opt      4
#  w_dg_vel_int_opt: interface velocitycalculation option between elements
w_dg_vel_int_opt      0
# Lump_eqns: Lump multiphase flow equations
lump_eqns             F
# Domain length
domain_length         1.
###
### end of scalars variables necessary for the arrays read after
###
exit    10
 
                                                                              
# BC variables: 
# If value < -1000, then a pre-defined function may be used.
 
# wic_vol_bc( stotel * nphase )
wic_vol_bc    -1001 input_wic_vol_bc_BL1_fcn
 
# wic_d_bc( stotel * nphase )
wic_d_bc    -1001 input_wic_d_bc_BL1_fcn
 
# wic_u_bc( stotel * nphase )
wic_u_bc    -1001 input_wic_u_bc_BL1_fcn
 
# wic_p_bc( stotel * nphase )
wic_p_bc    -1001 input_wic_p_bc_BL1_fcn
 
# wic_t_bc( stotel * nphase )
wic_t_bc  0   
 
# suf_vol_bc( stotel * cv_snloc * nphase )
suf_vol_bc    -1001.  input_suf_vol_bc_BL1_fcn
 
# suf_d_bc( stotel * cv_snloc * nphase )
suf_d_bc    -1001.  input_suf_d_bc_BL1_fcn
 
# suf_cpd_bc( stotel * cv_snloc * nphase )
suf_cpd_bc    0.
 
# suf_t_bc( stotel * cv_snloc * nphase )
suf_t_bc   -1001 input_suf_t_bc_BL1_fcn
 
# suf_p_bc ( stotel * p_snloc * nphase )
suf_p_bc       0.
 
# suf_u_bc( stotel * u_snloc * nphase )
suf_u_bc      -1001.  input_suf_u_bc_BL1_fcn
 
# suf_v_bc( stotel * u_snloc * nphase )
suf_v_bc       0.
  
# suf_w_bc( stotel * u_snloc * nphase )
suf_w_bc       0.
  
# suf_one_bc( stotel * cv_snloc * nphase )
suf_one_bc    0.

# suf_u_bc_rob1( stotel * u_snloc * nphase )
suf_u_bc_rob1  0.
 
# suf_u_bc_rob2( stotel * u_snloc * nphase )
suf_u_bc_rob2  0.
 
# suf_v_bc_rob1( stotel * u_snloc * nphase )
suf_v_bc_rob1  0.
 
# suf_v_bc_rob2( stotel * u_snloc * nphase )
suf_v_bc_rob2  0.
 
# suf_w_bc_rob1( stotel * u_snloc * nphase )
suf_w_bc_rob1  0.
 
# suf_w_bc_rob2( stotel * u_snloc * nphase )
suf_w_bc_rob2  0.
 
# suf_t_bc_rob1( stotel * cv_snloc * nphase )
suf_t_bc_rob1  0.
  
# suf_t_bc_rob2( stotel * cv_snloc * nphase )
suf_t_bc_rob1  0.
  
# x( x_nonods )
x    0.
 
# y( x_nonods )
y    0.
 
# z( x_nonods )
z    0.
 
# xu( xu_nonods )
xu    0.
 
# yu( xu_nonods )
yu    0.
 
# zu( xu_nonods )
zu    0.
 
# nu( u_nonods * nphase )
nu    1.
 
# nv( u_nonods * nphase )
nv    0.
 
# nw( u_nonods * nphase )
nw    0.
 
# ug( u_nonods * nphase )
ug    0.
 
# vg( u_nonods * nphase )
vg    0.
 
# wg( u_nonods * nphase )
wg    0.
 
# uabs_option( nphase )
uabs_option  3
 
# uabs_coefs( nphase, nuabs_coefs )
uabs_coefs   1.
 
# u_abs_stab ( mat_nonods, ndim * nphase, ndim * nphase )
u_abs_stab    0.
 
# u_absorb ( mat_nonods, ndim * nphase, ndim * nphase )
u_absorb   0.
 
# t_absorb ( cv_pha_nonods, nphase, nphase )
t_absorb    0.
 
# v_absorb ( cv_pha_nonods, nphase, nphase )
v_absorb  0.
 
# u_source( u_pha_nonods )
u_source  0.
 
# t_source( cv_pha_nonods )
t_source   0.
 
# v_source( cv_pha_nonods )
v_source   0.
 
#  udiffusion( mat_nonods, ndim, ndim, nphase )
udiffusion   0.
 
#  tdiffusion( mat_nonods, ndim, ndim, nphase )
tdiffusion   0.
 
# u ( u_pha_nonods )
u    0.
 
# v ( u_pha_nonods )
v    0.
 
# w ( u_pha_nonods )
w     0.
 
# den ( cv_pha_nonods )
den    1.
 
# satura ( cv_pha_nonods )
satura   -1001.  input_satura_BL1_func
 
# volfra ( cv_pha_nonods )
volfra    0.
 
# t ( cv_pha_nonods )
t    0.
 
# cv_one( cv_pha_nonods )
cv_one    0.
 
# p ( cv_nonods )
p     -1001. pressure_in
 
# cv_p (cv_nonods )
cv_p     -1001. pressure_in
 
# volfra_pore ( totele )
volfra_pore   .5

# perm ( totele, ndim, ndim )
perm      -1001.   input_perm_BL1_func
 
# eos_option( nphase )
eos_option   2
 
# cp_option( nphase )
cp_option   0
 
# eos_coefs( nphase, ncoef )
eos_coefs   -1001.  input_eos_coef_BL1_func
 
# cp_coefs( nphase, ncp_coefs )
cp_coefs   1.
 
# end of the input file
exit  10

 
