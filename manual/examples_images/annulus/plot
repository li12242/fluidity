#!/usr/bin/env python
#
# James Maddison

import math

import numpy
from matplotlib.pylab import *

import fluidity.diagnostics.calc as calc
import fluidity.diagnostics.fluiditytools as fluidity_tools

det = fluidity_tools.Stat("annulus.detectors")
arr = fluidity_tools.DetectorArrays(det)

t = det["ElapsedTime"]
tarr = arr["Water%Temperature%MidPoint"]

del(det)
del(arr)

fft = numpy.array([calc.NormalisedFft(vals) for vals in tarr.T])

semilogy()

plots = []
plots.append(plot(t, fft[:, 0]))
plots.append(plot(t, fft[:, 1]))
plots.append(plot(t, fft[:, 2]))
plots.append(plot(t, fft[:, 3]))
plots.append(plot(t, fft[:, 4]))
plots.append(plot(t, fft[:, 5]))
plots.append(plot(t, fft[:, 6]))

xlim(t[0], t[-1])
xlabel("Time (s)", fontsize = "large")
ylim(1.0e-6, 1.0)
ylabel("Mode amplitude (/ $\Delta T$)", fontsize = "large")

legend(plots, ["m = " + str(i) for i in range(7)], loc = 4)

savefig("ArrayFft.pdf")
savefig("ArrayFft.png")
clf()

theta = numpy.array([2.0 * math.pi * float(i) / float(tarr.shape[0]) for i in range(tarr.shape[0] + 1)])
tarrWrap = numpy.empty((tarr.shape[0] + 1, tarr.shape[1]))
tarrWrap[:tarr.shape[0], :] = tarr
tarrWrap[tarr.shape[0], :] = tarr[0, :]
tarr = tarrWrap
del(tarrWrap)

contourf(theta, t, tarr.T, 32)

xlim(0.0, 2.0 * math.pi)
xlabel("Azimuth (rad)", fontsize = "large")
ylim(t[0], t[-1])
ylabel("Time (s)", fontsize = "large")

bar = colorbar(format = "%.2f")
bar.set_label("Temperature (/ $\Delta T$)", fontsize = "large")

savefig("ArrayHovmueller.pdf")
savefig("ArrayHovmueller.png")
clf()
